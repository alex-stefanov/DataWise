{
    "data": [
        {
            "Exercise": "Given house values, find the most money you can rob while skipping adjacent houses to avoid being caught.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Traverse a graph starting from a source node to reach multiple destination nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Optimal search strategy for sorted data",
            "Label": "Binary Search"
        },
        {
            "Exercise": "In a maze, find the fastest route from the entrance to the exit while avoiding dead ends and obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Partition a string into as many palindromic substrings as possible and find all such partitions.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Study how to adapt to changing strategies of the opponent in the Colonel Blotto game over multiple rounds.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Improve the performance of the longest common subsequence problem using memoization",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find and list all possible Hamiltonian paths that visit every vertex exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "In a rectangular grid with obstacles, find the minimum path length between two points.",
            "Label": "BFS"
        },
        {
            "Exercise": "Optimize bracket positions by performing the fewest swaps to balance the string",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the nth Fibonacci number by using the sum of the two preceding numbers in the sequence.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficiently count contiguous subarrays whose sum equals the target using a prefix sum and hash map combination.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "List all the longest common subsequences of two strings, presented in lexicographical order.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the optimal way to rob houses along a street such that no two adjacent houses are robbed?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Study the application of matching pennies in economics and market competition.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a grid with various blocked cells, determine the shortest possible path while considering all directions.",
            "Label": "BFS"
        },
        {
            "Exercise": "Backtracking can be more efficient than brute force in many cases",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Explore how cake cutting can be applied to other resource-sharing problems.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate the target element in a bitonic array of integers, where the array contains values in the range of 0 to 100.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for a target element in a bitonic array of strings sorted first lexicographically in increasing order and then in decreasing order.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine if a specific graph structure exists as a subgraph within another graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Battle of the sexes",
            "Label": "Game Theory"
        },
        {
            "Exercise": "DFS is useful for problems involving tree decomposition and partitioning",
            "Label": "DFS"
        },
        {
            "Exercise": "Use a two-pointer technique to move all instances of a target value (e.g., zeros or negatives) to the end in linear time.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the maximum path sum in a matrix from the top-left to the bottom-right, only moving right or down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the starting and ending indices of a subarray whose sum equals the target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Optimize the N-Queens problem to work with minimal space, reducing complexity to O(n).",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify all sets of three numbers in an array where the total sum is zero, avoiding duplicate sets.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Union of sets representing shared interests between two people.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for the earliest occurrence of a target value in a sorted array with duplicate values, ensuring efficiency.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Study the effect of player preferences on mixed strategy decisions in a non-zero-sum game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine all distinct combinations of numbers from a list that sum to a given target, allowing repetitions of numbers.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Locate the target element in a sorted array with duplicates, ensuring that the search is completed in optimal time.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Combine overlapping intervals to form a continuous range of non-conflicting periods",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Locate the target element's range in a sorted array by efficiently identifying its first and last occurrence.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Trace each path from the corner cell to the middle of the maze",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a graph, return all distinct paths between two nodes, including intermediate nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Public goods games",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Group data points into clusters where each point is closer to others in its group than to those outside.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Explore a maze and determine the path that successfully connects the start and goal.",
            "Label": "DFS"
        },
        {
            "Exercise": "Examine the relationship between strategy randomness and payoff stability in matching pennies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Color a graph and check if it is possible to color the graph such that adjacent nodes have distinct colors.",
            "Label": "DFS"
        },
        {
            "Exercise": "Calculate the number of distinct ways to reach the top of a staircase with n steps, considering moves of size 1 or 2.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Partition a dataset into equal-sized groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Reduce array size to one by merging elements at minimal expense",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Given a number n, compute the Fibonacci sequence up to the nth number.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Extract all non-duplicate substrings from the string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Who wrote 'Romeo and Juliet'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Optimize jumps to minimize the steps to the end of the sequence",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Used for problems like container with most water or finding peaks",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Calculate the shortest path in terms of edges between two nodes in a graph.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify each connected group of nodes in a graph by performing a depth-first exploration.",
            "Label": "DFS"
        },
        {
            "Exercise": "Given a directed graph, identify its strongly connected components, focusing on how they relate to the graph's overall structure.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the closest element to a target value in a sorted array with a custom sorting order",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Social choice theory",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find a solution to place 8 queens on the chessboard with no attacking positions",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the elements present in both arrays and return them as an array of distinct values.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a set of integers, can you partition the set into two subsets with equal sums?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Solve the climbing stairs problem iteratively with tabulation",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Display all valid ways to position N queens on a chessboard such that no two queens attack each other.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the pair in two sorted arrays whose sum is closest to a target using a linear scan method.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the last occurrence of a target in an array with both negative and positive numbers",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Ideal for finding the shortest path in unweighted graphs",
            "Label": "BFS"
        },
        {
            "Exercise": "Expand the spanning tree with the least weight edges, avoiding cycles",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Union with weighted groups, aiming to keep the largest group by weight as the root.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify and solve for the Nash equilibrium in a sequential game with perfect information and multiple stages.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find pairs of numbers with a particular difference in a sorted array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Analyze endgame positions with two rooks versus a queen.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How did the ancient Incas manage their vast empire?",
            "Label": "N/A"
        },
        {
            "Exercise": "Use a traversal method to explore the graph and check if any path revisits a node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Develop a strategy for navigating zugzwang situations in strategic board games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Who invented the telephone?",
            "Label": "N/A"
        },
        {
            "Exercise": "Examine the impact of strategic voting in multi-candidate elections using a Condorcet method.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Sort an array of 0s, 1s, and 2s in one pass with minimal space usage.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Study Bertrand competition with firms offering complementary products.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search for the first occurrence of a target element in a sorted array with duplicates using an optimized approach.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine the maximum value of items that can be selected, where each item has a weight and a value, given a knapsack with a fixed weight limit.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Validate if a string follows a valid sum pattern with nested expressions",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Partition the given set into two parts where the sum difference is minimized",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Minimize the average waiting time by scheduling shorter jobs first",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find every route from the root node to the leaf nodes in a binary tree.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the pair of elements in an array that can hold the most water by considering the distance between them.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What was found in Tutankhamun's tomb?",
            "Label": "N/A"
        },
        {
            "Exercise": "Evaluate different scheduling scenarios to determine the highest profit",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Can be used to solve problems like word search in a grid",
            "Label": "DFS"
        },
        {
            "Exercise": "Search for the longest chain of 1's in a binary array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify redundant connections in a network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine how to fairly allocate resources when some parties are more risk-averse than others.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the best strategy for allocating time slots to activities",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Detect feedback loops in a workflow management system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is cognitive dissonance and how does it affect behavior?",
            "Label": "N/A"
        },
        {
            "Exercise": "Place N queens on an N\u00d7N chessboard such that no queen can attack another, and determine all valid configurations.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Flatten group trees using path compression to make group find operations more efficient.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Check for the longest substring of distinct characters in a string, ensuring no characters repeat.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Commonly used for problems involving grids or matrices with constraints",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the optimal way to divide an array into two parts to maximize the sum difference",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "The two pointers technique involves using two distinct pointers to traverse a data structure, often an array or a list, to solve problems by comparing or shifting the pointers towards each other or across the structure.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the rearrangement of characters that prevents adjacent duplicates",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine if two animals belong to the same habitat zone.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find all ways to select numbers from a set so that their sum equals a target, with repetitions allowed.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Minimize the total number of coins required to create a particular sum from a set of coin values",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find all pairs in a sorted array with a specific difference by comparing elements.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a series of numbers, find the contiguous subarray that yields the largest sum.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Calculate platform usage efficiency based on train schedule overlaps",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How is AI being used in creative industries?",
            "Label": "N/A"
        },
        {
            "Exercise": "Count the number of connected components in a grid of land and water.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the missing element in a sorted array with minimal computational resources by narrowing the search space.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given an undirected graph, find the shortest path in terms of edges between two nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "What are the implications of 5G technology?",
            "Label": "N/A"
        },
        {
            "Exercise": "For every node, find its depth by counting edges from the root node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify all valid configurations for placing N queens on a chessboard.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Check if a given set of numbers can be partitioned into two subsets with the same total sum.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify the parent node in a forest structure.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Compute the total cost of merging two groups when the elements in each group have associated weights.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Reorder the array in-place to group odd numbers at the beginning and even numbers at the end.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Locate the nodes in a graph that do not connect to any other nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Compare performance metrics (like cumulative reward and regret) of different bandit strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the range of a target in a sorted array by locating the positions of its first and last occurrences.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Validate the equivalence relation properties for a given set and relation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Group elements into hierarchical structures by identifying their connections.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Effective in solving problems with the minimum number of steps or transformations",
            "Label": "BFS"
        },
        {
            "Exercise": "Divide the set of numbers into two subsets to achieve the smallest possible difference in their sums",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a string, compute all possible partitions where each substring is a palindrome.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Arrange N queens on an N\u00d7N chessboard so that no two queens share a row, column, or diagonal.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "How does the melting of polar ice caps affect wildlife?",
            "Label": "N/A"
        },
        {
            "Exercise": "Resource allocation problems",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Rearrange 0s, 1s, and 2s in an array such that they appear in the order of 0s, followed by 1s and 2s.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Study a game scenario and highlight the player's choice that maximizes their payoff.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Evaluate how the number of players affects the equilibrium in a war of attrition.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Reverse the sequence of characters in a string or array by switching elements starting from both ends.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Return the longest common prefix from two strings by comparing characters in order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a binary tree, calculate the shortest path from the root node to any leaf node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Devise strategies for firms entering a Cournot competition with a new product in the market.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Study the role of marginal contributions in calculating the Shapley value.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Investigate the role of reputation in motivating contributions to public goods.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the character ordering in an alien language from a sequence of words.",
            "Label": "BFS"
        },
        {
            "Exercise": "What are the signs of burnout?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the first missing positive integer in a sorted array by applying an efficient search technique.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Evaluate how tactical voting in a two-party system can alter election results.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the deepest nodes by performing a graph traversal from the root.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify and list all valid configurations of queens on an N\u00d7N chessboard.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Investigate the impact of uncertainty and risk on decision-making in Stackelberg competition.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate a peak element in a 2D matrix using search strategies that minimize the overall complexity of the task.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Used to explore networks or graphs with multiple sources of information",
            "Label": "BFS"
        },
        {
            "Exercise": "What are the ethical concerns surrounding artificial intelligence?",
            "Label": "N/A"
        },
        {
            "Exercise": "List and print all combinations of the elements in the given set.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find a target pair in a rotated sorted array by adjusting indices based on conditions.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What is the significance of surrealism in the development of modern art?",
            "Label": "N/A"
        },
        {
            "Exercise": "Check if all stations in a metro system are interconnected.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Perform a traversal that aims to visit all the target nodes in a graph, with no revisiting.",
            "Label": "DFS"
        },
        {
            "Exercise": "List all Hamiltonian paths where each vertex in the graph is visited exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How would you maximize the revenue from cutting a rod into pieces based on the prices for each length?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficient data structure for disjoint subsets",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Efficiently manage jobs by executing the shortest first to minimize waiting",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Simulate dynamic merging of nodes in a forest and track the results.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find all possible ways to divide a string such that each substring is a palindrome.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Count the number of paths between two vertices with a limit on path length",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the fewest elements required to achieve a sum greater than the target value.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given a sequence of matrices, how can you calculate the optimal multiplication order to minimize the scalar cost?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is existentialism and how does it relate to human freedom?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the last occurrence of a target element with a specified index range",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a set of elements, create all possible subsets.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "How can you use dynamic programming to determine the optimal cuts for a rod to maximize the profit?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the combination of items that yields the highest value while keeping total weight within a specified limit.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find if a graph can be divided into two sets such that no two vertices in the same set are adjacent.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a string, partition it into substrings such that each substring is a palindrome.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Minimize the cost of splitting a rectangle into equal square pieces",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Sort a collection into subgroups based on their similarities.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Ideal for large datasets with sorted order",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find all possible ways to place N queens on an N\u00d7N chessboard without any two queens attacking each other.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is the importance of pronunciation in language learning?",
            "Label": "N/A"
        },
        {
            "Exercise": "Used in problems like knapsack, coin change, and longest common subsequence",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify the missing element in a sorted array while ensuring efficiency in terms of time and resources.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Analyze the role of forgiveness in long-term strategies in iterated prisoner's dilemma.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Cache the results of expensive function calls to avoid redundant calculations, improving the efficiency of solving overlapping subproblems.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is GDP and how is it measured?",
            "Label": "N/A"
        },
        {
            "Exercise": "Study strategies for fault tolerance and redundancy in network routing games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How would you recursively generate all subsets from a given set of integers?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is the concept of tonic and dominant in harmony?",
            "Label": "N/A"
        },
        {
            "Exercise": "How many ways can you sum elements of a given set to reach a target value, allowing repetitions?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficiently optimize the search space by considering constraints that limit the range of possible answers.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Optimize knapsack with fractional units for varying capacities",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Validate if a spanning tree is optimal in terms of connectivity and weight.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the largest element in a sorted array",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Manage group partitions due to network failures in a distributed system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify two numbers that sum to the given target in a sorted array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Monitor the size of clusters in a machine learning model.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Implement group leader election in a distributed system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Partition a string into substrings such that every substring is a palindrome, and find all possible ways to do so.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Study the influence of risk aversion on the responder's decision in the ultimatum game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Track the total number of players in connected gaming lobbies.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find if there is a path of length greater than K in a weighted graph",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for the square of a number within a range by applying optimal searching techniques.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Reorder the elements of a string by swapping pairs of characters from opposite ends.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the number of valid ways to place N queens on an N\u00d7N chessboard where no queens threaten each other.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "How do countries prepare for major sports events?",
            "Label": "N/A"
        },
        {
            "Exercise": "For three strings, compute the minimum number of operations required to make them equal by using insertion, deletion, and substitution.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Simulate the addition of barriers in a network and observe how it affects group formation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Solve the N-Queens problem while maintaining space efficiency of O(n).",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Increase the array sum by optimizing the selection of elements for negation",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Extract all subarrays that can be formed from the list.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Locate the minimum element in a rotated array with large integers and high precision values.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Calculate the shortest path between two nodes in a graph, counting only the number of edges.",
            "Label": "BFS"
        },
        {
            "Exercise": "What is the optimal way to convert one string into another using the least number of operations?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the shortest distance between multiple starting points and a target in a grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Move all zeroes in an array to the end while leaving the order of non-zero elements unchanged.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Query the size of overlapping intervals in real-time.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for a target in a sorted array with unique elements",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How did the ancient Mayans contribute to astronomy?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find and enumerate all the paths from the root to the leaves in a binary tree.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find all valid palindromic partitions for the given string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Calculate the sum of all subarrays that can be formed in an array of numbers.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Convert the recursive Fibonacci algorithm to an iterative solution with tabulation",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Can you break a string into valid words from the dictionary without leaving any leftover characters?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Perform a traversal of a binary tree where each level is processed in sequence.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify the smallest group in a dynamic set of groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find clusters in an undirected graph by checking for connected components.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine optimal strategies for the players in a classic prisoner's dilemma scenario.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Enumerate all the Hamiltonian paths in the graph that visit every vertex once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine how many distinct paths you can take to climb to the top of a staircase with n steps, given you can take 1 or 2 steps at a time.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Break a large problem into smaller, manageable subproblems",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "In a transportation network grid, simulate the spread of a breakdown or malfunction from multiple sources.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the optimal path in a grid with different weights for each cell.",
            "Label": "BFS"
        },
        {
            "Exercise": "Check if parentheses are balanced by verifying that every opening parenthesis is closed before the next one.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Explore the effects of modifying the payoff structure to reward partial cooperation.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Efficiently reassign group leaders after merging two groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Investigate how the number of firms in a Bertrand competition impacts market prices.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What should you do if you lose your passport while traveling?",
            "Label": "N/A"
        },
        {
            "Exercise": "Search for the maximum value in a rotated array using an efficient technique that minimizes the number of operations.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Merge two intervals if their ranges intersect.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "In an undirected graph, find all the edges that, if removed, will cause the graph to have more disconnected components.",
            "Label": "DFS"
        },
        {
            "Exercise": "Check for valid segmentation of a string into dictionary words by exploring every possible way.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find and categorize all strongly connected components in a directed graph, where each component has the property that there is a path between any pair of nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "For each node in a tree, find and list all its child nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Optimize the search for the shortest paths from a source vertex in a graph with bounded edge values",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the minimum in a rotated array where the rotation has caused a shift in the order.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Questions about natural events like earthquakes, hurricanes, and wildfires.",
            "Label": "N/A"
        },
        {
            "Exercise": "List all the substrings that are palindromes from a given string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Merge two sorted arrays step by step, ensuring the result is sorted.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the shortest path in a grid that contains both obstacles and open spaces.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a matrix, find the optimal path sum from the top-left to the bottom-right, where movement is allowed only to the right and down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the maximum sum path from the top-left to the bottom-right of a matrix, restricted to moving only right or down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Track the merging of nodes in a forest structure.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Examine how strategy changes when one player can manipulate the water levels of the other player\u2019s jug.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Efficiently answer if two nodes are connected in a dynamic graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Compute the sum of the minimum elements in every subarray of a given array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find isolated nodes in a graph where no other nodes are reachable.",
            "Label": "DFS"
        },
        {
            "Exercise": "What role does reading play in language acquisition?",
            "Label": "N/A"
        },
        {
            "Exercise": "Minimize the product of an array subset by selecting the right elements",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Given a tree, find the two farthest nodes and compute the length of the path between them.",
            "Label": "DFS"
        },
        {
            "Exercise": "Merge two sorted arrays by sequentially choosing the smallest element from both arrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify all viable paths in a maze from the starting location to the goal.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Rearrange a sequence of brackets using the least number of swaps for balance",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the maximum number of consecutive ones in a binary array by tracking positions efficiently.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Move all negative numbers to the end while ensuring the relative order of non-negative elements is preserved.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Explore the graph and group all nodes that are reachable from each other.",
            "Label": "DFS"
        },
        {
            "Exercise": "Navigate the rat through the maze by using both jumps and several steps.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Can you determine if any subset of numbers adds up to the given target sum?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Space complexity can be O(V) due to the queue",
            "Label": "BFS"
        },
        {
            "Exercise": "Reduces time complexity by breaking problems into smaller subproblems",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if a string has balanced parentheses by using a stack to match opening and closing parentheses.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Understand the concept of opposition in pawn endgames.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the number of contiguous subarrays that sum to a specific target using a sliding window and hash map.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the minimal cutting cost for turning a rectangle into squares",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How did the ancient Persians influence world history?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify all the unique ways the characters of a string can be rearranged.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Perform a topological sort on a graph, making sure to respect the direction of all edges.",
            "Label": "DFS"
        },
        {
            "Exercise": "How do we recognize patterns through cognitive processes?",
            "Label": "N/A"
        },
        {
            "Exercise": "Count paths in a directed graph from a source vertex to a destination vertex",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the maximum level in the tree by exploring all possible paths from the root node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Analyze the Shapley value in terms of its efficiency and fairness properties in cooperative games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Create a spanning tree with the smallest possible total edge weight",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Implement a solution to color a graph such that adjacent nodes have different colors.",
            "Label": "DFS"
        },
        {
            "Exercise": "Explore the implications of sealed-bid auctions in government procurement.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Implement a graph coloring algorithm that ensures adjacent nodes are colored differently.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the largest element in a rotated array with minimal computational effort using optimized search techniques.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What new technologies are improving human-computer interaction?",
            "Label": "N/A"
        },
        {
            "Exercise": "How does deforestation impact biodiversity?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the array subset with the smallest product by selecting elements carefully",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Split a string into valid words from a dictionary by testing different segmentation combinations.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Reverse the word order in a sentence while keeping the words themselves intact.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Check if a string or array is a palindrome by comparing elements from both ends.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How many different paths can be taken from the top-left to the bottom-right corner in a grid, moving only to the right or down?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given three strings, how many edit operations are necessary to transform one string into the other two?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if the graph can be decomposed into a spanning tree that minimizes weight.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Enumerate paths through a series of given nodes between source and destination",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find circular references in a database schema.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the effect of asymmetric costs on competition between firms in a Cournot model.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the fewest number of connections to link two people in a social network.",
            "Label": "BFS"
        },
        {
            "Exercise": "Calculate the maximum sum of all subarrays of a fixed size using a sliding window approach.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Search for the closest value to a target in a sorted array, optimizing the search to minimize unnecessary comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Examine the relationship between mixed strategy choices and player risk tolerance in non-zero-sum games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Compute the longest route in a grid while steering clear of obstacles.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "In a maze grid, calculate the shortest path between the start and destination points.",
            "Label": "BFS"
        },
        {
            "Exercise": "Check if the groups remain separate without sharing any elements or dependencies.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How do wildfires contribute to air pollution?",
            "Label": "N/A"
        },
        {
            "Exercise": "Analyze how to improve efficiency in sealed-bid auctions through strategic behavior.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "In a string, reverse the order of the words but not the characters within them.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Can be applied to problems like job sequencing, fractional knapsack, and scheduling",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Locate the nearest value to a target element in a sorted array using an efficient search technique that minimizes comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify a valid path between two nodes in a graph while satisfying certain conditions.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the first occurrence of a target element by narrowing the search space within the sorted array with duplicates.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the first occurrence of a target in an array with both negative and positive numbers",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Track parent-child relationships in a forest after merging operations.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for the range of a target element in a sorted array by locating the first and last indices.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the first occurrence of a target element with a specified index range",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Generate all Hamiltonian paths in the graph ensuring each vertex appears exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for the last occurrence in a sorted array with alternating sign elements",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a rod and a price table for different lengths, determine how to cut it to get the highest profit.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What are the signs of an approaching storm?",
            "Label": "N/A"
        },
        {
            "Exercise": "What are the different types of animal parenting strategies?",
            "Label": "N/A"
        },
        {
            "Exercise": "Does not work well with weighted graphs unless modified (Dijkstra's is preferred for that)",
            "Label": "BFS"
        },
        {
            "Exercise": "Calculate all possible shortest paths in a grid from a starting point to the destination.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a rod of length n and prices for each length, how do you maximize the profit by cutting it into smaller pieces?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Analyze optimal resource allocation strategies in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Verify whether a graph can be partitioned into two independent sets of nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Check if there exists a path with length greater than K, but only through a specific set of edges",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the number of ways to get from the top-left corner to the bottom-right corner in a grid, with the restriction of moving right or down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Detect connected regions in a flood simulation model.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine minimax outcomes in repeated zero-sum games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate the nodes that are positioned at the furthest depth in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Develop a strategy for avoiding zugzwang in chess endgame studies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Which country hosts the Tour de France?",
            "Label": "N/A"
        },
        {
            "Exercise": "List all strings that can be formed by placing spaces between characters in the given string",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify all the critical nodes in an undirected graph whose removal would disrupt the connectivity of the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Minimize the number of bins required to store a set of objects with given sizes and bin capacities",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Implement a zigzag traversal of a binary tree where the order alternates at each level.",
            "Label": "BFS"
        },
        {
            "Exercise": "Can be used in simulations, like spreading influence or disease across a population",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for duplicate numbers in an unsorted array by comparing the elements as you go.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find how many times a target value appears in a sorted array using an optimized approach.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Efficiently combine two sorted arrays into one array while preserving their order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Implement level order traversal of a binary tree and return the values at each level.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find all paths in the graph where each vertex is visited exactly once (Hamiltonian paths).",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the cumulative sum of minimum elements across all subarrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Efficiently find the target element in a sorted array containing duplicates with minimal resource usage.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Used to find the closest pair of elements in sorted arrays",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Minimize the number of swaps required to properly align brackets in a string",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Calculate the minimum number of platforms for a fully operational station",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "In an unweighted graph, find the longest direct path between two nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify extra connections in a co-authorship collaboration graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the least product by selecting appropriate elements from the array",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Propose a solution to handle the situation where cake portions are unequal in value to each participant.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the connected components of a graph that changes over time.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Guide the rat through a maze by utilizing jumps and multi-step movements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the lexicographically ordered power set for a given set.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Optimize your resource distribution strategy when battlefields have varying importance in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify the largest area formed by two lines in an array and the space between them.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Count how many times a target element appears in a sorted array, minimizing comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for a target in a bitonic array with an extremely large array size and a high value range.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Design an N-Queens solution with minimal space complexity, using only O(n).",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Check if a graph contains a subgraph that matches a given set of nodes and edges.",
            "Label": "DFS"
        },
        {
            "Exercise": "Balance brackets by swapping elements to reduce the number of required operations",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find cycles in a directed graph by analyzing nodes that are revisited when following edges.",
            "Label": "DFS"
        },
        {
            "Exercise": "Given a 2D grid of water and land, identify all the isolated land areas.",
            "Label": "BFS"
        },
        {
            "Exercise": "Study the effect of time constraints in a competitive water jug problem.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the peak element in a matrix by applying efficient search techniques that reduce the number of comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the shortest path in a grid of size N x M with multiple obstacles between two given points.",
            "Label": "BFS"
        },
        {
            "Exercise": "How can you find the best accommodation deals?",
            "Label": "N/A"
        },
        {
            "Exercise": "Detect redundant connections in a distributed computing network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Study the relationship between zugzwang and forced captures in abstract games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Swap the positions of words in a string while preserving the characters of each word.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the largest peak element in a sorted array where elements follow a descending order until the peak.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a binary tree, find the shortest path to the farthest leaf node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Generate distinct subsets of a set with exactly k elements",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How do moral relativism and moral absolutism differ?",
            "Label": "N/A"
        },
        {
            "Exercise": "Detect duplicates in an unsorted array by comparing elements during traversal.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine if a tree is symmetric by comparing the structure of its two halves after a central division.",
            "Label": "DFS"
        },
        {
            "Exercise": "Cluster elements based on their proximity to each other in a feature space.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given a list of house values, determine the maximum amount that can be robbed without robbing two adjacent houses.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Search for a target element in a sorted array with alternating signs",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Study how reputation and past behavior influence future decisions in repeated prisoner's dilemma.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Analyze scenarios where players can invest resources to punish defections.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a grid of cells with weights, determine the optimal path from the start to the destination.",
            "Label": "BFS"
        },
        {
            "Exercise": "Generate paths from source to destination minimizing edge count",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Explore strategies for a player who can bluff or mislead the opponent.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Convert a fraction into a sum of fractions with numerator 1",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Calculate the square root of a number using binary search to minimize computation time.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for the pair with the closest sum to the target in two sorted arrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Move odd numbers to the front of the array, with even numbers staying at the end.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Optimize the sum by minimizing the negative effect of K negations",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Merge two meeting schedules if their time slots overlap.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How do memes reflect cultural shifts?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a graph, find the parent-child relationship between two nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Use a divide-and-conquer approach to find a peak element in a given array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How did the Apollo 11 mission change space exploration?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a set of interconnected web pages, find the optimal route to a target page.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the optimal combination of rotations to open the lock",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Assist the rat in navigating the maze using jumps and multi-step paths.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Organize a set of elements into a hierarchy where each element is part of a larger group.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Calculate the largest stretch of consecutive ones in a binary array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Check if the string can be decomposed into valid sub-expression sums",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the number of distinct ways to travel from the top-left to the bottom-right corner of a grid, restricted to right or down movements only.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Square every element in the sorted array and return the result in sorted order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Analyze how reputation affects fairness in repeated bargaining scenarios.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Using two indices, identify the subarray whose sum equals the given target value.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Detect connected regions in a game world map graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Optimize the longest increasing subsequence problem with dynamic programming",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Optimize station capacity by minimizing platform use without affecting train flow",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine the smallest subset whose sum exceeds a given target value.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficiently locate the maximum element in a rotated array by narrowing down the search range with minimal steps.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find two indices in an array that contain the most water, considering the distance between them.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the longest path between two nodes in a tree to calculate its diameter.",
            "Label": "DFS"
        },
        {
            "Exercise": "Detect communication clusters in a satellite network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Maintaining separate element sets",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the shortest paths from a source vertex to all vertices in a graph with bounded edge weights.",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What are the major differences in education systems across cultures?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the parent set in a union of overlapping intervals.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Help the rat navigate a maze by considering both single jumps and multiple-step moves.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Generate all possible selections of elements from the set and present them.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for a target element in a bitonic array, where the array first increases and then decreases, with optimal complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a graph, determine the minimum number of edges required to reach the destination from a start node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given an array of jump values, check if it's possible to reach the last index by following the jump restrictions at each element.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Investigate the consequences of tactical voting when the electorate is divided into two opposing factions.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search for a target in a sorted array of strings",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Accelerate path lookup in disjoint set by minimizing traversal steps using path compression.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Maximize platform efficiency by minimizing wait times for trains",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Use the fewest coins possible to achieve a target sum by selecting from available coin denominations",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find a target element in an almost sorted array, where the order of elements deviates by at most one position from sorted order.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Check if two nodes in a graph belong to the same connected component.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for duplicates in an array by scanning through it and comparing elements.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "For every node, calculate the depth by counting the number of edges from the root.",
            "Label": "DFS"
        },
        {
            "Exercise": "Search for the smallest element that is greater than or equal to the target number in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Binary search for sorted arrays",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How can communities prepare for tsunamis?",
            "Label": "N/A"
        },
        {
            "Exercise": "Rearrange a string of characters to avoid adjacent repetitions",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify loops in a software package dependency graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine how many operations (insertions, deletions, substitutions) are needed to convert three strings into each other.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What are the central conflicts in 'To Kill a Mockingbird'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a grid with defined dimensions, find the number of possible paths from the top-left to the bottom-right corner.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the largest sum path in a matrix where you can only move to the right or down, from the top-left to the bottom-right.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate subsets of a set and return them in lexicographical order.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find a peak element in an array where the element is not smaller than its neighbors.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Which desert is located in northern Chile?",
            "Label": "N/A"
        },
        {
            "Exercise": "Quick merging and splitting of groups",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Explore the interplay of minimax strategies and equilibrium concepts.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate the maximum element in a rotated array by reducing the number of comparisons through optimized searching.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Efficient search for a target element in an infinite array by expanding the search boundaries intelligently.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Verify if a tree has mirror symmetry by comparing the subtrees of its root node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Study the impact of social norms on public goods contributions.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the square of a number efficiently within a specified range using fast search algorithms.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the strongly connected components in a directed graph and analyze how they form the structure of the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Generate every unique sequence of elements from the given set.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a collection of pairs, find the longest chain that can be created by ordering the pairs in increasing order of the second element.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find all substrings where each character is distinct.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a 2D matrix with obstacles and a target, find the minimum number of moves from the start to the target.",
            "Label": "BFS"
        },
        {
            "Exercise": "Locate the square of a number within a range with fast search techniques.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine the middle node of a linked list with one pointer advancing at double the speed of the other.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Efficiently identify the peak element in an unsorted array using a binary search-like method.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Search for a viable path in a maze that leads from the start to the goal.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the economic incentives that contribute to the overuse of shared resources.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine if there exists a path longer than K in a graph with a constraint on the maximum path length",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What are the main causes of climate change?",
            "Label": "N/A"
        },
        {
            "Exercise": "Check for cycles in a directed graph and explain the effect of cycles on graph traversal algorithms.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the shortest rotation sequence to reach the target configuration",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Rearrange the array such that odd numbers are at the front, preserving their order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Count how many different palindromic subsequences are possible in the string.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What were the primary causes of the Peloponnesian War?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find all unreachable nodes in a graph by traversing it from a specific node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the parent nodes for each node in a tree structure.",
            "Label": "DFS"
        },
        {
            "Exercise": "Search for the smallest element greater than or equal to the target in a sorted array with minimal comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Implement a method to check if there are any cycles in a directed graph by examining each node and edge.",
            "Label": "BFS"
        },
        {
            "Exercise": "Implement pathfinding to find the shortest route in a shooting game with obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Count the number of ways to travel from the top-left to the bottom-right of a grid, considering only rightward and downward moves.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Return the subsets of a set in lexicographical order after generating the power set.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How does Orwell use allegory in 'Animal Farm'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given house values, what is the maximum sum you can rob without robbing two consecutive houses?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if two pixels are part of the same color blob in an image.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Analyze how players can achieve a better coordination outcome in the battle of the sexes game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "If you are climbing a staircase of n steps, how many possible ways can you reach the top using steps of size 1 or 2?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the smallest number of intervals that cover the same range",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Efficiently shift all zeroes to the end of an array without disturbing the sequence of non-zero elements.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Evaluate strategies for allocating scarce resources between competing agents.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Helps with traversing graphs that involve multi-level hierarchies",
            "Label": "BFS"
        },
        {
            "Exercise": "Speed up pathfinding algorithms by memoizing previously found paths",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given three strings, determine the minimum number of insertions, deletions, and substitutions required to match them.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Search for the missing element in a sorted array using a minimal comparison approach to narrow the search space.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find all paths from source to destination using a minimum number of edges",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Check if it's possible to reach the last position in a list of steps",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How do cognitive biases affect decision-making?",
            "Label": "N/A"
        },
        {
            "Exercise": "Enumerate every possible way to position N queens on a chessboard without conflicts.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the optimal path for the rat in the maze, considering both jumping and stepping.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find all distinct valid arrangements of parentheses using the specified number of pairs.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Eliminate all duplicates from a sorted array by updating it in place.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the independence of two groups based on a relationship matrix.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Sort the array to achieve the largest possible lexicographic value within a limited swap constraint",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What are the future trends in e-commerce technology?",
            "Label": "N/A"
        },
        {
            "Exercise": "Devise strategies for a player facing an opponent who always defects.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Using a fast and slow pointer, determine the middle of a linked list.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the longest continuous palindrome sequence in a string.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate all valid subsets whose sum equals the target",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the valid dictionary words that can form a string by exploring all combinations.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine how iterated prisoner's dilemma strategies are affected by the number of players involved.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Count how many times a target element appears in a sorted array by minimizing the number of comparisons needed.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Reorder the words of a string in reverse while leaving the characters in each word intact.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Generate all non-repetitive substrings in a string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Efficiently locate the Kth smallest element in an array by optimizing the search process.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the path from the root node to a leaf node that requires the fewest steps in a binary tree.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find all ways to travel from different starting nodes to the goal node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Efficiently search for a peak element in a 2D matrix using an approach that reduces unnecessary comparisons between elements.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine the fair payout for each player in a coalition using the Shapley value.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Establish the order of characters in an alien language from a list of words.",
            "Label": "BFS"
        },
        {
            "Exercise": "In a graph, calculate the minimum distance from a starting node to multiple target nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine optimal strategies for both players in the battle of the sexes game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given two strings, how do you determine the smallest number of operations to convert one into the other?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify the range of an element by efficiently finding both its first and last occurrence in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Return the longest prefix by comparing characters in both strings from the beginning.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Examine the effect of time constraints on strategy in a war of attrition.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Traverse a graph, visiting all target nodes in any order.",
            "Label": "DFS"
        },
        {
            "Exercise": "Locate nodes in a graph that do not connect to other parts of the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Search for pairs of elements in a sorted array with a specific difference value.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How do you manage your budget while traveling?",
            "Label": "N/A"
        },
        {
            "Exercise": "Merge based on a weighted decision tree to ensure groups are merged in an optimal order.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine minimax strategies for games involving resource allocation.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify all paths that connect various nodes in a graph to the goal node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify possible deviations from equilibrium strategies in sequential games with perfect information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Study techniques for achieving a forced checkmate in the endgame.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a directed graph, identify any cycles and discuss the methods for cycle detection.",
            "Label": "DFS"
        },
        {
            "Exercise": "What is a passing tone in melodic movement?",
            "Label": "N/A"
        },
        {
            "Exercise": "Improve search efficiency by applying constraints to limit the search space and reduce unnecessary computations.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine the minimum cost for cutting a rectangle into squares",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Compute the merging cost when a penalty is incurred for merging groups with too many elements.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find distinct subsets from a set with the maximum possible sum",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Monitor the size of supply chains in an inventory system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Check if a graph is symmetric by comparing its structure to its mirror image.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the optimal K elements to negate for the highest sum",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify the closest value to a target element in a sorted array with minimal comparisons using an optimized search strategy.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Solve the water jug problem with competition for a limited number of steps.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What is the largest desert in the world?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the most efficient moves in a competitive water jug problem where players can sabotage each other.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Check for the existence of a subset whose sum matches a target value.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Evaluate the strategic value of bluffing in a sequential game with perfect information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Divide items to maximize total value within capacity",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the maximum value in a sorted array while optimizing the search to reduce unnecessary steps and comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Locate the position of an element in a rotated sorted array with an efficient approach to reduce time complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Efficiently locate the maximum element in a sorted array with a strategy that reduces the search time.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine the longest path in an unweighted graph from one node to another.",
            "Label": "BFS"
        },
        {
            "Exercise": "Explore the impact of introducing randomness in mixed strategies in matching pennies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find all independent subgraphs in a given graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Generate all the paths from the root to the leaf nodes in a binary tree.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the depth of each node in a tree, considering it as a rooted tree.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the sum of all subarrays that can be generated from the array's elements.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Search for all different ways to reach the target node from different starting points.",
            "Label": "DFS"
        },
        {
            "Exercise": "What role does irony play in 'The Crucible'?",
            "Label": "N/A"
        },
        {
            "Exercise": "How do renewable energy sources help combat climate change?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the path with the minimum total weight in a weighted grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Enumerate every possible grouping of elements and display the results.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a binary tree, return the values at each level, alternating the order from left to right and right to left.",
            "Label": "BFS"
        },
        {
            "Exercise": "Check if two strings have the same characters with identical counts.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Set up 8 queens on a chessboard in a way that no two queens share the same row, column, or diagonal",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the largest country in the world by area?",
            "Label": "N/A"
        },
        {
            "Exercise": "In a given string, find the longest palindromic sequence of characters that maintains the order.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Space complexity can be reduced with the tabulation approach",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Investigate the role of technological spillovers in a Cournot competition scenario.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search for an element in an unbounded array by growing the search window iteratively.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the optimal number of connections to link two people in a social network.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify and navigate through each disconnected component in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "How do you construct a dominant seventh chord?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate the square of a number within a range by applying search methods that minimize search space.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the bridges in a graph by determining the edges that, if removed, would disconnect parts of the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Verify if a sequence of characters remains unchanged when reversed.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find communication groups in a messaging app network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How can you recursively build every subset from a set of elements?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the least number of operations required to convert three given strings into a single matching string.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if two overlapping intervals are in the same combined range.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the optimal way to convert one string into another through the fewest operations?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the optimal pricing strategy for firms in Bertrand competition with capacity limitations.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How do cognitive processes change with aging?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find a path through a maze, starting from the initial point and ending at the target.",
            "Label": "DFS"
        },
        {
            "Exercise": "Explore and print every path from the root to the leaf nodes in a binary tree.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify the maximum distance path in a matrix where obstacles block movement.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for the last occurrence of a target in a sorted array of strings",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Calculate the diameter of a tree by finding the longest path between two nodes in the tree.",
            "Label": "DFS"
        },
        {
            "Exercise": "Traverse a binary tree in level order and output the nodes in an ordered list.",
            "Label": "BFS"
        },
        {
            "Exercise": "Validate if sum-strings are formed from specific set of digits or symbols",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What genre best describes the movie?",
            "Label": "N/A"
        },
        {
            "Exercise": "Depth-First Search",
            "Label": "DFS"
        },
        {
            "Exercise": "Calculate the cumulative minimums of all subarrays in an array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the strongly connected components of a directed graph and list the nodes that belong to each component.",
            "Label": "DFS"
        },
        {
            "Exercise": "Analyze a sequential game with perfect information in terms of risk and reward.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Handle connectivity queries in a network with incremental updates.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Minimize rotations for a lock with digits arranged in a circle",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Solve the Knight\u2019s tour using a heuristic strategy that prioritizes unvisited squares",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Swap the words in a string to reverse their order while retaining the characters within them.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find subsets with a given average",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify the different routes from the corner to the maze's center",
            "Label": "Backtracking"
        },
        {
            "Exercise": "In a tree structure, identify all the leaf nodes that mark the end of each branch.",
            "Label": "DFS"
        },
        {
            "Exercise": "Ensure the string contains no extra parentheses and that each opening parenthesis is paired with a closing one.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "In a dictionary of words, find the minimum transformation sequence from a start word to an end word, with only one letter change allowed per transformation.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the best strategy for routing traffic in a network with fluctuating demand.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search for a feasible route through a maze from the entrance to the exit.",
            "Label": "DFS"
        },
        {
            "Exercise": "What were the key achievements of the ancient Mesopotamians?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate the largest value that is smaller than or equal to a given number in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Cluster locations on a map ensuring geographic proximity.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Traverse the entire tree from the root node, ensuring all descendants are visited.",
            "Label": "DFS"
        },
        {
            "Exercise": "Check if the spanning tree connects all nodes with the minimum total weight.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Extract all palindromic substrings from a string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the maximum possible sum of a subarray with a fixed size using the sliding window algorithm.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Analyze the impact of limited information on resource allocation in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find if a string can be broken into valid words by testing different combinations from the dictionary.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Partition a string into valid words from a dictionary by exploring all possible ways.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the central conflict in the movie?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the shortest path from multiple sources to a target node in a graph.",
            "Label": "BFS"
        },
        {
            "Exercise": "In a grid, simulate the spread of water flooding from multiple points, and calculate how long it takes to fill the entire area.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the maximum possible revenue by cutting a rod into pieces with the given prices for each length.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify all segments of the list that can form subarrays.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Calculate the shortest distance between two points on a grid where some cells are blocked, and only horizontal and vertical moves are allowed.",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for a target value in a sorted array with duplicates while ensuring minimal computational overhead.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for a local maximum in an array where the peak element is greater than its neighbors.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find optimal decisions in games with penalty costs.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Investigate the effects of time constraints on optimal strategy formulation in matching pennies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Repeated halving of the search range",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Maximize the water area between two lines by choosing the correct indices from the array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Explores nodes level by level",
            "Label": "BFS"
        },
        {
            "Exercise": "Fractional knapsack with varying capacities",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How does the stream-of-consciousness technique affect the narrative in 'Mrs. Dalloway'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find if there exists a path of length greater than K by traversing through a minimum number of edges",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How can cities become more sustainable?",
            "Label": "N/A"
        },
        {
            "Exercise": "Binary search for searching in both directions",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Which country is known as the Land of the Rising Sun?",
            "Label": "N/A"
        },
        {
            "Exercise": "Use union-find to simulate the merging of friend groups efficiently when new friendships are made.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Use path compression to avoid the overhead of deep recursion in disjoint set operations.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Examine how external shocks (e.g., changes in raw material costs) affect the Cournot competition equilibrium.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the minimum required platforms for non-overlapping train schedules",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Use a similarity metric to organize elements into coherent groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Check if the relation induces equivalence classes for all pairs of elements.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Solve a sequential game with perfect information involving more than two players.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Verify if a network of pipes is fully connected.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given three strings, find the minimum number of changes to make them identical.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Locate the pair from two sorted arrays whose sum is closest to the target value with minimal computation.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Explore minimax strategies in auction-style games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Examine strategies for network routing games with dynamic changes in network capacity.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a string, determine all possible ways to split it into palindromes.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the smallest territory in a grid-based simulation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Minimize the space complexity in the N-Queens problem to O(n) while solving it.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Efficiently locate the smallest element greater than or equal to the target in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Start from the root and visit every node in the tree, following a defined traversal method.",
            "Label": "DFS"
        },
        {
            "Exercise": "What is the nature vs. nurture debate in psychology?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given the jump values at each index of the array, can you reach the last index by jumping through the positions?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Optimize the search for a peak element in a 2D matrix by focusing only on the elements greater than or equal to their neighbors.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Track merging operations in a forest while maintaining tree balance.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "List all substrings of the string that have distinct characters.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Helps to solve problems by avoiding the brute-force approach",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Apply an optimized search technique to identify a peak element in a 2D matrix where each element is greater than or equal to adjacent elements.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "In a weighted graph, find the shortest path from several sources to a target node.",
            "Label": "BFS"
        },
        {
            "Exercise": "What are the key components of a language learning routine?",
            "Label": "N/A"
        },
        {
            "Exercise": "Explore alternative equilibria in the battle of the sexes game when players adopt mixed strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate the closest element in a sorted array when there are multiple elements equally close",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Create a storage solution that maximizes the number of items by optimizing the arrangement of shelves",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine the best selection of items to carry, ensuring the total weight stays within the allowed limit.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Search for a path in a graph where the edge weights do not increase past a certain threshold.",
            "Label": "DFS"
        },
        {
            "Exercise": "What is the longest sequence that can be found in both of these strings, maintaining order?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is the law of supply and demand?",
            "Label": "N/A"
        },
        {
            "Exercise": "Use a two-pointer approach to move a specific element (like zeros or negative numbers) to the end of the array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find repeating entries in an array by iterating through it and checking for matches.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Logarithmic time complexity",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Optimize the process of rope merging to reduce the total expense",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Given several zombie positions, calculate the time it takes for zombies to reach every area in a grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Check for all unique triplets in an array where the sum equals zero, ensuring no repeated combinations.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Simulate a forest merge process and determine the final tree hierarchy.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the maximum number of pairs that can form a chain such that each pair connects to the next based on the pair's order.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the intersection of two sorted arrays by comparing their elements.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Check for the longest substring in a string that doesn't contain any duplicate characters.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a string, find the longest palindrome substring.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Compute the square root of a number in logarithmic time by narrowing down the possible solutions.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What is the role of satellites in weather forecasting?",
            "Label": "N/A"
        },
        {
            "Exercise": "What is the role of executive functions in cognitive control?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a target sum, find all possible combinations of numbers from a list that add up to the target, with repetition of elements allowed.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find duplicate connections in a city\u2019s utility grid.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What causes thunderstorms?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the largest number that can be formed by swapping digits at most K times",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Minimize the overall cost of combining ropes through strategic pair selection",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Create the minimum spanning tree by adding the least expensive edge at each step",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify the depth of each node in a tree structure, considering it as a rooted graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the distinct subgraphs within a given graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Use the Shapley value to allocate resources in a cooperative game scenario.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What insights into prehistoric life were gained from the discovery of \u00d6tzi the Iceman?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find all regions of connected land within a grid and count them.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine whether a valid path exists to reach one node from another in the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Backtracking is commonly used in solving Sudoku, N-Queens, and subset problems",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Develop strategies for managing the transition between defense and offense in Tic-Tac-Toe.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify all the disconnected nodes that cannot be reached from a specific node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Effective for problems that involve finding subarrays or subsequences",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Merge two color regions in an image if their boundaries touch.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How do cultural norms influence dress codes?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a tree, calculate the diameter by finding the longest path from one node to the farthest node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Break a string into valid words from a dictionary by exploring possible combinations.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the shortest path from multiple source nodes to a destination in a grid with obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the fixed point by comparing the index and value while eliminating parts of the array in each step.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What is an El Ni\u00f1o event?",
            "Label": "N/A"
        },
        {
            "Exercise": "Generate all subsets of a set of strings",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a string, return all possible palindromic partitions of the string.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Examine how non-standard or unconventional strategies can influence outcomes in Tic-Tac-Toe.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What makes modern art provocative or controversial?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the farthest route you can take in a matrix with obstacles in your way.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Explore optimal strategies in repeated matching pennies games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Investigate the use of mixed strategies in a network routing game with uncertain traffic patterns.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Navigate the longest possible route through a matrix, avoiding blocked paths.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the pair of elements that hold the most water when considering the distance between them.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Transform overlapping intervals into the fewest non-overlapping intervals",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Solves problems by transforming them into simpler subproblems",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "How does deductive reasoning work in logic?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate a target element in a rotated sorted array with distinct elements",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Square the elements of a sorted array and return them in sorted order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Traverse a directed graph and list the nodes that can be visited starting from a given point.",
            "Label": "BFS"
        },
        {
            "Exercise": "Explore all nodes of the tree, ensuring every node is touched once during the traversal.",
            "Label": "DFS"
        },
        {
            "Exercise": "Output all possible longest common subsequences of two strings, ordered lexicographically.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Verify whether a graph is bipartite by checking for odd-length cycles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the closest pair in two sorted arrays by using two pointers, one starting from the beginning of each array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Move all zero values in an array to the right side, leaving non-zero elements in their original positions.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given an array of integers, find the subarray that maximizes the sum of its elements.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Move all zero values to the right of the array while maintaining the relative order of non-zero elements.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "In a string, identify the longest palindromic substring with the least number of characters changed.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate every possible configuration of puzzle pieces that leads to a solved state.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Pack objects into bins with fixed capacities, minimizing the number of bins used",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find a path from one node to another by traversing through the graph\u2019s edges.",
            "Label": "DFS"
        },
        {
            "Exercise": "Use a two-pointer technique to sort an array of 0s, 1s, and 2s in linear time.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the total of all subarray minimums in an array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Search for the smallest missing positive integer in a sorted array with a strategy that minimizes the time complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Discover connected components by visiting each node and marking it as part of a component.",
            "Label": "DFS"
        },
        {
            "Exercise": "Visit each connected node in the graph, making sure that each node is accessed exactly once.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify nodes in a graph that cannot be reached from a given node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine how external factors, like alliances or negotiations, impact resource distribution in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate a path in a graph that must pass through certain nodes or edges.",
            "Label": "DFS"
        },
        {
            "Exercise": "Return a valid topological order for a given directed acyclic graph with no cycles.",
            "Label": "DFS"
        },
        {
            "Exercise": "Use jump-based logic to predict successful or failed sequences",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How do you make a perfect pizza dough?",
            "Label": "N/A"
        },
        {
            "Exercise": "Analyze strategies for proposers and responders in the ultimatum game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Devise strategies for distributing resources in a Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a network of cities, determine the shortest path from multiple cities to a central city.",
            "Label": "BFS"
        },
        {
            "Exercise": "In a grid, find and count all islands formed by adjacent land cells.",
            "Label": "BFS"
        },
        {
            "Exercise": "Reorder the characters in a string to avoid repeating adjacent characters",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How do you choose the items that result in the highest value without exceeding the knapsack's weight limit?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find optimal merging steps to minimize the reduction cost",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify strongly connected components in a directed graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Analyze the scenario with asymmetric payoffs for hunting stag and hare.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What is the concept of market failure?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the number of separate island groups in a 2D grid.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify duplicates in an unsorted array by iterating and comparing the elements in place.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What is the minimum number of scalar multiplications required to multiply a series of matrices?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Locate the element closest to a target value in a sorted array using a minimal number of comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What did the discovery of the Antikythera mechanism reveal about ancient Greek technology?",
            "Label": "N/A"
        },
        {
            "Exercise": "Compute the nth Fibonacci number by using the relationship between the previous two numbers in the sequence.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Maximize the difference of sums by partitioning the array into two subarrays",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Traverse a grid to find all distinct island groups using DFS or BFS.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Trace all available routes from the maze corner to the middle cell",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the shortest route through a grid while avoiding obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Examine the role of taxation in encouraging contributions to public goods.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Efficient search algorithm",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Manage dynamic group resizing in a distributed environment.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify every palindrome present as a substring in a given string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Sort an array containing only 0, 1, and 2 with a linear time solution.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Investigate the role of cooperation in a Stackelberg competition model.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Explore each isolated component in a graph structure.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the common elements between two sorted arrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find all triplet combinations in an array where the sum equals zero, making sure to check for uniqueness.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the shortest path from a start vertex to all other vertices in a graph with bounded edge weights using Dial\u2019s algorithm",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Is it possible to find a subset of numbers that adds up to the specified sum?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify vertices in a graph that do not lead to any other nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Efficient search for exact matches in sorted arrays",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Generate the largest possible number by swapping digits a maximum of K times",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine strategies when players have a memory of past outcomes.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Analyze the concept of dominance in strategies for war of attrition scenarios.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the minimal number of coins that can form a specific amount using available coin values",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Ensure efficient merging of nodes using path compression in a forest.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the theory of comparative advantage?",
            "Label": "N/A"
        },
        {
            "Exercise": "Search for the target in a bitonic array where the peak value is repeated multiple times in both the increasing and decreasing portions.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Evaluate the cost to merge two groups while ensuring group balance after merging.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Explore all the isolated parts of a graph and identify connections.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the smallest group of customers sharing a service plan.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the total number of distinct ways to climb a staircase, where each step can be either 1 or 2 steps.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the longest path between any two nodes in a tree and compute the diameter.",
            "Label": "DFS"
        },
        {
            "Exercise": "Backtracking for constraint satisfaction",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Help the rat in its journey through the maze by using both jumps and multi-step solutions.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How does the theme of guilt appear in 'Macbeth'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Study strategies for load balancing in network routing games with multiple traffic sources.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "For every node in a tree, find its distance from the root node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the index of a target element in a rotated sorted array using an optimized approach.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Efficiently locate a pair in a rotated sorted array that sums up to the target value by considering both halves of the array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Analyze how learning algorithms can determine optimal mixed strategies in matching pennies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Calculate the rotation strategy for unlocking a circular mechanism",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Investigate the implications of having a large number of arms in the multi-armed bandit problem.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find all unique subsets of a set of numbers that add up to a given target sum.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the rearrangement of a string where no identical characters are adjacent",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What is the difference between the Summer and Winter Olympics?",
            "Label": "N/A"
        },
        {
            "Exercise": "Create every possible distinct ordering from a set of elements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Using two pointers, reverse a string or array by continuously swapping elements from the two ends.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Minimize the number of coins required to make a target sum with the fewest coin denominations",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the shortest path between two nodes in a graph using the fewest edges.",
            "Label": "BFS"
        },
        {
            "Exercise": "Study how the principle of \"anticipation\" influences decision-making in Tic-Tac-Toe.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search for the element in a sorted array with a specified index range",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Distribute resources to maximize their impact",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Select time blocks to ensure uninterrupted task completion",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Check if two geographic zones share the same parent region.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Investigate the role of punishment in the ultimatum game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the minimum number of connections between two people in a social network.",
            "Label": "BFS"
        },
        {
            "Exercise": "Ideal for problems like the 'word ladder' where transformations need to be minimized",
            "Label": "BFS"
        },
        {
            "Exercise": "Detect redundant edges in a geographical map representation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Optimize union operations by efficiently managing leader reassignments.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Count the occurrences of a target element in a sorted array, ensuring fast search times with minimal comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Reduce the complexity of finding the root of a group by applying path compression.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the significance of the green light in 'The Great Gatsby'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Ensure constant-time leader updates after group mergers in a dynamic set.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given a graph with directed edges, determine if it contains any cycles or closed paths.",
            "Label": "BFS"
        },
        {
            "Exercise": "Create a sorted power set of a set using lexicographic ordering.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Devise a fair division strategy for splitting a resource among players.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What is the role of user-generated content in trends?",
            "Label": "N/A"
        },
        {
            "Exercise": "Validate if parentheses are balanced using a stack-based approach to track opening and closing symbols.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Divide the array into two groups to achieve the largest difference in their sums",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What is the relationship between saving and investment?",
            "Label": "N/A"
        },
        {
            "Exercise": "Investigate strategic voting under a single transferable vote (STV) system.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify the first occurrence of a target in an array with many duplicates",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Check for the longest common prefix in two strings by comparing each corresponding character.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Use path compression to accelerate find operations by shortening the search path.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify if a given relation is an equivalence relation by testing its properties.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Traverse the tree and identify the longest path from the root to a leaf node, which gives the depth.",
            "Label": "DFS"
        },
        {
            "Exercise": "Optimize satisfaction with constraints on resource availability",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Which subsequence is the longest and common to both of these strings?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficiently sort an array of three possible values: 0, 1, and 2.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify all possible ways to split a string into palindromic segments.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Can be adapted for solving problems in artificial intelligence and game theory",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the largest possible permutation of the array with a limited number of element swaps",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the maximum length of a chain of pairs, where the second element of one pair is less than the first element of the next pair.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate all substrings where no character is repeated.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Calculate the number of contiguous subarrays that sum up to a given target using a prefix sum array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the target in a rotated array with a small number of elements",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify isolated clusters in a social network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the strongly connected components of a directed graph and explain their significance in the graph structure.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find a path through a graph that satisfies a set of conditions using backtracking.",
            "Label": "DFS"
        },
        {
            "Exercise": "How does modern art reflect societal changes?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the color set that minimizes the total number of colors while respecting adjacency constraints",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Analyze strategies with memory limitations for past moves.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify paths that maximize the number of distinct edges used from source to destination",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the maximum possible sum path from the top-left to the bottom-right of a matrix, with movements restricted to right and down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given a grid, how many different paths exist from the top-left corner to the bottom-right corner?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Split a graph into subgraphs using a partitioning strategy.",
            "Label": "DFS"
        },
        {
            "Exercise": "Search a graph for a parent node and its direct children.",
            "Label": "DFS"
        },
        {
            "Exercise": "Balance the union operations to minimize the number of leader updates.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for disconnected nodes in a graph by exploring all possible paths.",
            "Label": "DFS"
        },
        {
            "Exercise": "Given a social network graph, find the minimal path between two people.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine if two tasks belong to the same project group.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Questions about music notation, harmony, melody, rhythm, and musical concepts.",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the equivalence class of an element in a relation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine all possible paths between two nodes, where each path includes a unique set of edges.",
            "Label": "DFS"
        },
        {
            "Exercise": "Select the minimum weight edges that connect all nodes without forming cycles",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Check if the string follows a specific sum pattern with multiple terms",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Examine the role of punishment and reward in promoting cooperation over multiple rounds.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Investigate the effect of external factors (e.g., market conditions) on war of attrition strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the maximum sum from the top-left to the bottom-right of a matrix, allowing movements only to the right or downward.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given a set of n stairs, find out how many ways you can climb to the top taking either 1 or 2 steps at a time.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Select edges progressively to form the minimum spanning tree without cycles",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Works well when we need to explore a search space deeply",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for the longest prefix by comparing both strings from left to right.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Locate all nodes that are not accessible from the initial node in the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find a path in a maze while avoiding dead ends and obstacles.",
            "Label": "DFS"
        },
        {
            "Exercise": "Separate the set into two subsets with the minimal sum difference",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the largest planet in our solar system?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the target element in an infinite array using a growing search strategy that dynamically adapts to the problem.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How do animals adapt to extreme environments?",
            "Label": "N/A"
        },
        {
            "Exercise": "Track and visualize tree merging operations in a forest structure.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Eliminate duplicate values in a sorted array by adjusting the array elements in place.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Efficiently arrange shelves in a storage area to accommodate the largest number of items",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Generate all substrings of a string that are palindromes.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify the shortest path in a network of webpages, starting from a given URL.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the optimal course of action for the player to follow in order to reach the enemy while avoiding obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the strongly connected components in a directed graph, ensuring that each component is maximally reachable among its nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the safest path to traverse through a landmine zone.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the least rotations required for each digit alignment",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find all the distinct partitions of a number using smaller integers.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Maximize the utility of resources across various recipients",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine a method of cake cutting that minimizes wasted resources or unused portions.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a set, generate every possible subset by recursively including elements.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Perform union of groups, adjusting group weights dynamically after each merge.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given a list of numbers, compute the number of ways to reach a target sum by using any of the numbers multiple times.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Optimize knapsack by picking parts of items with the highest value-to-weight ratio",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Cluster elements ensuring inter-cluster relationships are minimal.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify the middle element of a linked list with one pointer moving at double the speed of the other.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Explore the optimal strategy in matching pennies when one player has an advantage in information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find all unique ways to partition a number into smaller sums.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine possible paths under the condition of variable jumps",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "In a grid, determine the shortest path from the start point to the target point while avoiding obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify a path with specific length constraints between two nodes in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the target in a rotated array with performance constraints",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What is the highest capital city in the world?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify paths avoiding specific forbidden vertices or edges",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Check if two users share the same group in a messaging app.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the sum of all possible subarrays by iterating through all possible subarray starts and ends.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given a set of items with values and weights, find the combination of items that maximizes value while staying within the knapsack's weight capacity.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Prioritize activities based on their finish times to maximize selection",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify all longest common subsequences of two given strings and output them in lexicographic sequence.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the best combination of items that fits within the weight limit and gives the highest total value.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Binary search is an efficient algorithm for finding an element in a sorted array by repeatedly dividing the search interval in half.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify the leader of an element's group by repeatedly checking its parent.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Dynamic merging of groups with constraints",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find all distinct Hamiltonian paths in a graph such that each vertex is visited exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Reorganize the array by pushing all occurrences of a given number (e.g., zero) to the end.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine how many contiguous subarrays sum up to a target using a hash map for cumulative sums.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find a division of the set into two subsets with the smallest sum difference",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find all the possible subarrays from the provided list.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Count all contiguous subarrays where the sum of their elements equals the target value.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How do philosophers define knowledge?",
            "Label": "N/A"
        },
        {
            "Exercise": "Optimize the search for a target in a sorted array containing duplicates, improving search efficiency.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify the path with the smallest total weight from the start to the destination in a weighted grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Pack a collection of items into bins efficiently, reducing the number of bins",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What can be done to protect endangered species from extinction?",
            "Label": "N/A"
        },
        {
            "Exercise": "Can you reach the end of an array if you are allowed to jump from each index by the maximum number of steps defined at that index?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Search through the graph to reach all multiple target nodes starting from a single source.",
            "Label": "DFS"
        },
        {
            "Exercise": "How do the Commonwealth Games differ from the Olympics?",
            "Label": "N/A"
        },
        {
            "Exercise": "What are some tips for memorizing vocabulary quickly?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the series of nodes required to move from one node to another in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Study the impact of different offer sizes on responder behavior in the ultimatum game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify the range of a target element in a sorted array by locating both its first and last occurrence.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Study real-world applications where dominant strategy equilibrium influences decision-making.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a set of numbers, check if there exists a subset with a sum equal to the target.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Can a string be divided into valid dictionary words based on a given list of words?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the optimal subset for minimizing the product of the array",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Optimize array sum by negating the smallest elements up to K times",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Square the values of the sorted array and return them in sorted order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Handle dynamic group merges in a distributed environment.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find Nash equilibrium in a pure strategy game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Minimize the number of platforms needed to accommodate all trains",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Square all numbers in a sorted array and return the array sorted in increasing order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Explores one branch fully before backtracking to explore others",
            "Label": "DFS"
        },
        {
            "Exercise": "Simulate jumps to evaluate the viability of reaching the destination",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What is the least number of changes (insertion, deletion, substitution) needed to transform one string into another?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Apply a heuristic method to efficiently find a valid Knight\u2019s tour path",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Analyze the effects of side payments in fair resource allocation negotiations.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Compute the cost of merging two groups by considering external constraints on group characteristics.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given a grid of numbers, find the maximum path sum from the top-left corner to the bottom-right corner by only moving right or down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find all possible routes between two nodes, considering direct and indirect connections in the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Explore the use of game trees to model a sequential game with perfect information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify minimax strategies in a game with tied outcomes.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How many different ways can you reach the top of a staircase with n steps, where you can choose between 1 or 2 steps at a time?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check for cycles in a directed graph by tracking the paths between nodes and their reachability.",
            "Label": "DFS"
        },
        {
            "Exercise": "Ideal for solving problems with constraints on consecutive elements",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the root of an element in a disjoint-set structure through path traversal.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Analyze how collusion or tacit agreements affect outcomes in a Bertrand competition.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the largest number smaller than or equal to a target in a sorted array with optimal complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Which country has the longest coastline?",
            "Label": "N/A"
        },
        {
            "Exercise": "How do triads function in Western music harmony?",
            "Label": "N/A"
        },
        {
            "Exercise": "Schedule overlapping requests with the highest priority first",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Design a strategy to minimize regret in a multi-armed bandit problem with non-stationary rewards.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How do you maintain healthy skin?",
            "Label": "N/A"
        },
        {
            "Exercise": "What is the minimum number of coins required to match a given value using a set of available denominations?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify a peak element in an array of characters where the peak is lexicographically higher than its neighbors.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Implement distributed algorithms for group balancing.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Explore all ways to divide a string into segments that are all palindromes.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Divide a graph into subgraphs such that no subgraph is connected to another.",
            "Label": "DFS"
        },
        {
            "Exercise": "Optimize knapsack with continuous weight fractions",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Solve the N-Queens puzzle with a solution that minimizes space usage to O(n).",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the intersection of two arrays by checking for matching elements in both arrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Generate all possible subarrays of a given list of elements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify and mark connected land regions in a grid-based map.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify the largest value in a sorted array by applying an efficient search technique to minimize comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Combine elements with minimal incremental costs to reduce size",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Rearrange the characters of a string so that no identical characters are next to each other",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Devise an optimal strategy for a sequential game with perfect information considering time-sensitive decisions.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the minimal cost of rope combination while maintaining a single connected rope",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Optimize the time complexity of finding a group representative by applying path compression iteratively.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find a minimal space solution to the N-Queens problem with O(n) complexity.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Select the most valuable subset of items that fit within a given weight limit.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Analyze the role of bidder asymmetry in sealed-bid auctions.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What are some of the most iconic moments in sports history?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the fixed point in a sorted array using a logarithmic time complexity approach.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify the main representative in a union of student committees.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the element in a sorted array where the value is equal to its index in O(log n) time.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Validate the independence of two groups by confirming that they do not interact in any way.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How will technology affect global education systems?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find a subgraph with a specific arrangement of nodes and edges within a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the largest possible number by swapping digits up to K times at most",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Explore equilibria in resource allocation under scarcity.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the quickest possible path to navigate through a maze from the entrance to the exit, avoiding obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for the closest integer square root using a binary search method in an optimal range.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What is the contiguous subarray that has the highest sum in a list of integers?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Implement a traversal on a binary tree where the direction of each level alternates between left-to-right and right-to-left.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the largest group among dynamically changing groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Use a sliding window approach to solve the longest increasing subsequence problem in dynamic data streams",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Locate the isolated nodes that are not connected to any reachable nodes in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify subsets of elements that are closest to one another based on similarity.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Rearrange the array by moving all instances of a given value (e.g., 1s) to the end of the array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What is the role of TikTok in shaping trends?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate the floor of a number in a sorted array using efficient search strategies.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Detect circular ownership in a resource allocation graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Design an algorithm that partitions elements based on similarity metrics.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the job order that provides the highest profit within the available time constraints",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify the optimal sequence of moves in a competitive water jug puzzle where one player can block the other.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a directed graph, list all nodes in the order they are visited from a start node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Place 8 queens on a chessboard such that no two queens threaten each other.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Build a solution from the bottom up by filling a table with intermediate results",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the number of clockwise and counterclockwise moves to unlock",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Which continent has the most countries?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a tree, identify all parent-child pairs in the structure.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the minimum in a rotated array with values from 1 to N, where N is a large number.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Generate all subsets of a set and arrange them in lexicographic order.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find and show all the possible combinations formed from a set of elements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Compare the performance of Thompson sampling with epsilon-greedy for multi-armed bandit problems.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the fewest number of swaps needed to correctly match all parentheses",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Compute the sum of the minimum value for each subarray in an array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify a contiguous sequence in a sorted array that sums up to a specific target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Approximate the optimal solution to the travelling salesman problem by forming a cyclic tour using a minimum spanning tree",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Perform a search on a sorted array with varying step sizes",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the target in a bitonic array where the first segment forms a small increase followed by a sharp drop.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the total sum of minimum values of all possible subarrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find subgroups in a graph of political alliances.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the least number of platforms for efficient station operation",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Check for extra links in a social media graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find a contiguous subarray in a sorted array where the sum of the elements equals a specified target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find sub-networks in a wireless communication graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Enumerate all the possible solutions that can be obtained by reordering puzzle pieces.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify all shortest possible paths from the start to the target point in a grid with some obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Combine two separate friend groups when a new connection is made in a social network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Group elements that meet a similarity condition.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Iteratively solve problems by filling a table with subproblem solutions",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the longest prefix that both strings share by comparing them character by character.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Leverage data structures to track and optimize group leader updates dynamically.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Check if a string can be interpreted as a sum in any number base",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What are the most famous international sports events?",
            "Label": "N/A"
        },
        {
            "Exercise": "Explore the maze to find all paths from the corner to the center cell",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Group nodes together based on the number of paths that connect them in the graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What did the excavation of the ancient city of Teotihuacan tell us about Mesoamerican culture?",
            "Label": "N/A"
        },
        {
            "Exercise": "Check if there is a path longer than K that does not revisit any vertex",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Enumerate all ways to arrange N queens on a chessboard with no conflicts between them.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the central element in a linked list using two pointers that traverse at different speeds.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Depth-First Search (DFS) is an algorithm for traversing or searching tree or graph data structures. It starts at a given node and explores as far as possible along each branch before backtracking.",
            "Label": "DFS"
        },
        {
            "Exercise": "Generate all possible states that solve the puzzle by rearranging the pieces.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a maze, find the quickest path to the exit while bypassing any obstacles in the grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Optimize group lookups using path compression techniques.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify all possible distinct strings resulting from inserting spaces in between the characters",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify the largest smaller element in a sorted array through efficient and time-effective algorithms.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for the shortest safe route in a mine-ridden path.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for a target element in an almost sorted array where each element is at most one position away from its correct position.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Locate the Kth smallest element in an array using optimized methods to minimize time complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Sort the power set of a given set in lexicographic order.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find and output all valid Hamiltonian paths where each vertex is visited exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Use the sliding window method to find the highest sum of a subarray of a given size.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Calculate the fewest steps required to reach a particular webpage starting from a given URL.",
            "Label": "BFS"
        },
        {
            "Exercise": "How does the director use symbolism in this movie?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find all isolated land masses in a given 2D grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Use a sliding window to compute the maximum sum for a subarray of specified size.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Produce all strings that result from adding spaces between each character of the original string",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Cut a rectangular board into squares with the least number of cuts",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Search for the nearest element to the target value in a sorted array, optimizing the comparison process for speed.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How did the ancient Egyptians practice medicine?",
            "Label": "N/A"
        },
        {
            "Exercise": "Analyze the outcomes when players can bluff or mislead each other.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a tree, determine the nodes that are leaf nodes with no children.",
            "Label": "DFS"
        },
        {
            "Exercise": "Split a string into palindromic substrings and return all possible ways to do so.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate all paths from the root of the binary tree to its leaves.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How do meteorologists predict rainfall?",
            "Label": "N/A"
        },
        {
            "Exercise": "Search for a target in a rotated sorted array",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify optimal strategies in an asymmetric game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine if a graph can be divided into two groups such that no two adjacent nodes belong to the same group.",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for a target element in a sorted array containing duplicates, focusing on minimal time and space complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Locate a subgraph that matches a given structure in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Given a set of numbers, determine all distinct combinations that sum to a specific target, allowing repeated selection of numbers.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify cases where the dominant strategy leads to a socially optimal outcome.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify all ways to navigate from one node to the goal node in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Reverse a string or array in place by swapping elements from both ends.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "In a directed graph, find the fewest number of edges needed to go from a start node to a destination node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the diameter of a tree by identifying the two farthest nodes and calculating their distance.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the length of the longest substring with non-repeating characters.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Apply a divide-and-conquer strategy to break a problem into subproblems",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Traverse a tree and determine the depth of every node from the root node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Merge subsets of integers that satisfy a divisibility condition.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the smallest alliance in a strategy game simulation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given a directed acyclic graph, return the linear order of nodes that respects dependencies.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify circular trade routes in an economic model.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the number of palindromic subsequences in a string that are formed from different character combinations.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Output every Hamiltonian path that visits all vertices exactly once in the graph.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Efficient for problems with an optimal greedy choice property",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the closest pair of elements from two sorted arrays, one element from each array, whose sum is closest to a target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Generate all possible longest common subsequences between two strings and sort them lexicographically.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the task ordering that yields the highest reward without missing deadlines",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify all possible paths from the root to any leaf in a binary tree.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find how many levels exist between the root and the deepest node in the tree.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find a target element in an array where each item is at most one position away from where it should be in a sorted order.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find all configurations that solve the puzzle by reordering its pieces in various ways.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the number of separate land clusters in a grid of 1s and 0s.",
            "Label": "BFS"
        },
        {
            "Exercise": "Locate the largest element smaller than a given target in a sorted array using an approach that minimizes search steps.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Devise an unbeatable strategy for playing Tic-Tac-Toe.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "List all possible ways to partition a string into palindromic substrings.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine how players can use partial cooperation to improve long-term outcomes in repeated games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the first appearance of a target element in a sorted array with duplicate entries by narrowing the search efficiently.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Analyze the leader\u2019s optimal output strategy when facing a price-sensitive follower.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the contiguous subarray in an array that gives the maximum product.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficiently find the largest element smaller than the target in a sorted array, ensuring minimum time complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Explore the use of the Rubinstein bargaining model to achieve fair resource allocation.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Explore a maze and find the path that connects the start and the goal nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the solution to the N-Queens problem while ensuring space complexity remains O(n).",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Can be adapted for solving mazes or puzzles",
            "Label": "DFS"
        },
        {
            "Exercise": "Trace a path through the graph and ensure that the nodes are connected in a valid sequence.",
            "Label": "DFS"
        },
        {
            "Exercise": "Reorder the elements of the array to achieve the highest lexicographic sequence, given a swap limit",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Solve the water jug problem where the players have to alternate turns in filling or emptying jugs.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the closest element in a sorted array when the target is smaller than all elements",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How do cultural differences influence social interactions?",
            "Label": "N/A"
        },
        {
            "Exercise": "Calculate the minimal cost required to connect a set of ropes into one",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine the effect of technological innovation on firms' pricing in a Bertrand competition.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Solve the graph coloring problem by finding the smallest color set where adjacent vertices have different colors",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Enumerate and print every arrangement that solves the N-Queens problem.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for a target in a bitonic array with random order after applying a non-standard rotation.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find unreachable nodes by exploring the graph from a given starting point.",
            "Label": "DFS"
        },
        {
            "Exercise": "Enumerate paths between source and destination while adhering to edge constraints",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Ensure equitable resource distribution to those with the greatest need",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Given two sequences of characters, what is the minimum number of operations to convert one sequence into the other?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Implement a crawler to find the shortest route between two webpages.",
            "Label": "BFS"
        },
        {
            "Exercise": "Examine the trade-off between individual benefits and collective social benefits in public goods games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine if two organisms share the same phylogenetic tree branch.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How many unique paths are there in a grid to move from the top-left to the bottom-right corner, with the restriction of moving right or down?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given a start and end node, find every possible path between them in a graph, including edge constraints.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the longest common sequence starting from the first character of both strings.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Solve the travelling salesman problem approximately by applying the minimum spanning tree as a base for route estimation",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Locate the smallest missing positive integer in a sorted array using an efficient search method.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How do attachment styles affect human relationships?",
            "Label": "N/A"
        },
        {
            "Exercise": "Simulate distributed group operations with message passing.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Break down a fraction into the sum of several distinct fractions with unit numerators",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find all subarrays with a sum equal to the target using the two-pointer technique.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Minimize the overall cost of cutting a rectangle into square segments",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What are the major archaeological findings in the Valley of the Kings?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the shortest path in an unweighted graph, counting the number of edges between two nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a tree structure, calculate the depth of each node from the root.",
            "Label": "DFS"
        },
        {
            "Exercise": "Explore outcomes in a networked version of the stag hunt with multiple players.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find a peak element that is greater than or equal to the elements next to it in an array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the smallest number that is greater than or equal to the target in a sorted array with optimized steps.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Calculate platform requirements based on train schedules and timings",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find all disconnected groups of land in a map of water and land.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for the first occurrence in a sorted array with small integer values",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What are the best strategies for mastering a foreign accent?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find repeating elements in an array by comparing each element with every other element.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Divide a graph into subgraphs such that each is internally connected.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the root of an element's group while minimizing the number of lookups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Study the existence of dominant strategies in symmetric games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify the first occurrence of a target element in a sorted array, minimizing the number of comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Efficiently merge two sorted arrays into one by repeatedly picking the smaller element.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Navigate through a maze to find the shortest route from the entrance to the exit while avoiding obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "What is the role of the All-Star Game in the NBA?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a directed graph, find cycles and explain how to identify them efficiently.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the longest sequence of pairs that can be chained together where each pair\u2019s second element is smaller than the first element of the next.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Use path compression or other optimizations to update group leaders efficiently.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find all possible ways to place N queens on an N\u00d7N chessboard such that no two queens threaten each other.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the contiguous subarray with the largest possible sum in a given sequence of integers.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Calculate the longest path between any two nodes in a tree.",
            "Label": "DFS"
        },
        {
            "Exercise": "Minimize the negative impact of K negations on the array sum",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What items should be selected to maximize the total value while ensuring their combined weight doesn't exceed the given limit?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Analyze the use of mixed strategies in bargaining scenarios in non-zero-sum games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify the minimum product subset of the given array",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Efficiently find the missing element in a sorted array by applying a search strategy with minimal overhead.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Examine the limitations of dominant strategies in complex or asymmetric games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find an element that is not smaller than its neighbors by scanning through the array efficiently.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Top-down approach with memoization",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find distinct subsets of a set where no element is repeated",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find cyclic dependencies in a service-oriented architecture.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What are the best ways to exchange currency while abroad?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find all parent nodes in a tree or graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the target element in an infinite array by progressively increasing the range of the search.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Evaluate the effectiveness of strategies like grim trigger in iterated prisoner's dilemma.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Efficiently distribute resources to ensure the highest level of satisfaction",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Organize a list of objects into categories by similar characteristics.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Minimize overall waiting time by scheduling the shortest jobs first",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Optimize a list of intervals to ensure no overlap between them",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify the longest prefix shared by two strings.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the Kth smallest element in a sorted array through efficient narrowing of the search range.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the longest contiguous block of non-repeating characters in a string.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Calculate the depth of nodes in a tree by iterating over each node.",
            "Label": "DFS"
        },
        {
            "Exercise": "What is the difference between dry and wet heat cooking?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the quickest path to safety while avoiding landmines along the way.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Move specific elements to the end of an array (e.g., all negative numbers).",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Test if a relation forms equivalence classes for all elements in a set.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Is it morally wrong to deceive someone for their own benefit?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the closest element to the target value in a sorted array with an optimized search process to ensure minimal time complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine if a graph can be divided into two sets without internal connections within each set.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find a path between two nodes in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the largest community in an online discussion platform.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Explore minimax strategies in games with probabilistic payoffs.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Reorder an array such that all odd elements come before even elements.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Efficiently locate the largest element smaller than or equal to the target in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine how many shortest paths exist from the start to the destination in a grid with obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Questions about popular trends, memes, and online social behavior.",
            "Label": "N/A"
        },
        {
            "Exercise": "Study how asymmetric bargaining power affects fair allocation strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Study how uncertainty about future rounds impacts players' decisions in iterated prisoner's dilemma.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search a graph to find the parent of a particular node.",
            "Label": "DFS"
        },
        {
            "Exercise": "For a source node, determine the shortest paths to several target nodes considering edge weights.",
            "Label": "BFS"
        },
        {
            "Exercise": "Calculate the best possible route for the player to take to reach the enemy in the shortest time.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a directed graph, identify the subgraphs where every node can reach every other node within the same subgraph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find all the end nodes in a tree structure that do not have child nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Explore how mixed strategies can reduce predictability in matching pennies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the contiguous subarray within a one-dimensional array of numbers that has the largest sum.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Track the merging of nodes and ensure the forest remains acyclic.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify and group elements that are most similar to each other.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the closest value to a target element in a sorted array by narrowing the search efficiently to reduce comparison overhead.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Can you select a subset of numbers from the set that adds up to the target sum?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Solve the problem of combining elements with the least merging cost",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Minimize the comparisons while counting the occurrences of a target element in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What are the current viral trends on social media?",
            "Label": "N/A"
        },
        {
            "Exercise": "Reorder an array to its largest lexicographic form with a constrained number of allowed swaps",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Efficiently merge two connected communities in a dynamic social network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Maximize the sum of a fixed-size subarray using the sliding window technique.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What is the significance of social influence in human psychology?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the least-cost path from the top-left to the bottom-right corner in a weighted grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Partition a graph into clusters while minimizing the number of operations required.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "In a binary tree, identify the path with the least weight to reach a leaf node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Group objects that have similar attributes, disregarding irrelevant differences.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Questions related to physical, mental, and emotional health.",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a list of words in a foreign language, determine the character order in its alphabet.",
            "Label": "BFS"
        },
        {
            "Exercise": "Form a nested grouping structure where each subgroup is related to its parent.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What are the key principles of behaviorism?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the peak in an array with multiple local maxima, where each element could potentially be a peak.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a string, return the longest palindromic substring with no interruptions.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given a string, partition it in every way such that all the substrings are palindromes.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Use constraints to effectively restrict the search space and optimize the search algorithm.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How does trade benefit countries?",
            "Label": "N/A"
        },
        {
            "Exercise": "In a directed graph, find the shortest path from a start node to all other nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Reverse the order of words in a string without altering the word contents.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "In a given tree, return all the leaf nodes that have no descendants.",
            "Label": "DFS"
        },
        {
            "Exercise": "Evaluate the effectiveness of individual quotas in preventing the tragedy of the commons.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What is the role of salt in cooking?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine if there is a path greater than K in a graph with multiple edge weights",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a list of numbers, find the number of ways to sum them to a target value, using any of the numbers multiple times.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "For an array, compute the sum of all possible subarrays formed by picking various combinations of elements.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Calculate the best path in a weighted grid based on the cell costs.",
            "Label": "BFS"
        },
        {
            "Exercise": "Study the impact of pattern recognition in creating successful Tic-Tac-Toe strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Form all possible variations of the string by inserting spaces at different positions",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Count all subsequences of the string that are palindromic without altering the order of characters.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Verify if the relation partitions a set into disjoint equivalence classes.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Return the common elements between two arrays, ensuring no repetition in the result.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Analyze strategies to avoid overuse of a shared resource.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find a subset of nodes and edges that forms a subgraph within a larger graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Given an unweighted graph, implement a method to find the longest path between two nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Analyze endgame positions where one side has a time advantage over the other.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Solve knapsack by picking fractional parts in decreasing value-to-weight order",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Study Bertrand competition in the context of international markets and exchange rates.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the root group in a connected component of strings.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for a sequence of nodes and edges forming a subgraph in a graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify redundant edges in a tree-based structure.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Devise an optimal strategy when Rock-Paper-Scissors is embedded in larger meta-games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine if all parentheses in a string are matched and balanced without extra parentheses.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Group all connected nodes together by exploring the graph and marking them as visited.",
            "Label": "DFS"
        },
        {
            "Exercise": "What are the features of a socialist political system?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the middle of a singly linked list using a slow and fast pointer technique.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What is the role of satellites in space research?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given an undirected graph, identify all articulation points and explain their impact on connectivity.",
            "Label": "DFS"
        },
        {
            "Exercise": "How does the movie explore relationships?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate the smallest element in a rotated array with duplicates and handle edge cases.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Locate the smallest element greater than or equal to the target number in a sorted array with optimized search methods.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a string, decide if it can be split into valid words from a dictionary.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Explore all possible Hamiltonian paths in the graph, ensuring every vertex appears exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given an array of integers, determine how many ways you can sum them up to a target sum.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Locate the Kth smallest element in a sorted array while minimizing comparisons and search time.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Explore minimax strategies in card games with hidden information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify superfluous pathways in a transportation routing system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find and print all distinct combinations of a set of elements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "In a grid, simulate the spread of a technological failure or bug from several initial nodes to all other nodes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Optimize the allocation of resources for maximum chances of victory across all battlefields in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the edges in a graph that, if removed, would disrupt the graph\u2019s connected structure.",
            "Label": "DFS"
        },
        {
            "Exercise": "Verify if a string remains the same when traversed from both ends to the middle.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How does industrial agriculture contribute to environmental degradation?",
            "Label": "N/A"
        },
        {
            "Exercise": "Calculate the shortest number of steps to reach a specific webpage in a web crawling problem.",
            "Label": "BFS"
        },
        {
            "Exercise": "What is the most efficient way to multiply a series of matrices to minimize the scalar multiplication steps?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find two elements in a rotated sorted array that sum to a target value by utilizing binary search and two-pointer techniques.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find a peak element in a high-dimensional array where the peak can be identified based on dimensional rules.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given a string, locate the longest palindromic substring without skipping characters.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What does the term 'barometric pressure' mean?",
            "Label": "N/A"
        },
        {
            "Exercise": "Determine the total number of separate connected land components in a grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the smallest social circle in a network of friends.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Check for sum-strings with both positive and negative integers",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine if two strings are anagrams by verifying that both contain the same characters and count.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the minimum cost required to merge two groups under given conditions.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine minimax strategies in traffic flow optimization games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a list of items with weights and values, find the combination that maximizes the total value within the knapsack's weight limit.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the minimal cost route in a grid with weighted cells.",
            "Label": "BFS"
        },
        {
            "Exercise": "In a grid, find the shortest path avoiding obstacles to reach the end point from the start point.",
            "Label": "BFS"
        },
        {
            "Exercise": "In a maze represented as a grid, calculate the shortest path from the start to the exit by considering all possible routes.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a set of integers, determine the number of ways you can sum them to reach a target value, with repetition allowed.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the smallest number of platforms required to handle all train arrivals",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Locate the closest element in an array with performance constraints",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for triplets whose sum is zero in a sorted array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Combine two overlapping time intervals into one.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Evaluate how changes in payoffs affect the equilibrium in the battle of the sexes.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find out if a subset exists that results in the desired sum from a given set of numbers.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a sequence of words in an alien language, determine the character ordering.",
            "Label": "BFS"
        },
        {
            "Exercise": "Explore minimax outcomes in competitive resource allocation.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Return the zigzag order of nodes at each level in a binary tree.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the path with the least number of edges in a binary tree between the root and a leaf node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify the nodes that have no paths connecting them to the root or source node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Optimize rotations for a lock with digits arranged in a circle",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Check if a given graph is embedded within a larger graph as a subgraph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Greedy algorithms often have a linear time complexity, making them very efficient for large datasets",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the square of a number in a defined range using efficient searching algorithms.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Efficiently find the closest sum pair from two sorted arrays using a sliding window approach.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Optimize edge selection to form the minimum spanning tree in the graph",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What is the contiguous subarray in an array of numbers that results in the maximum sum?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify groups of connected islands in a grid.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for distinct islands in a grid where land is represented by 1 and water by 0.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Track the longest uninterrupted sequence of ones in a binary array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "For a graph with multiple source nodes, find the shortest route to a destination node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for a target in an unbounded array by increasing the search window dynamically based on previous results.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What are the best practices for disaster recovery?",
            "Label": "N/A"
        },
        {
            "Exercise": "How do you find the least costly order for multiplying matrices in terms of scalar multiplications?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is the role of cooperation in animal societies?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the maximum length substring with distinct characters in a string.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How does installation art create an immersive experience for viewers?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the points in a graph where no further traversal is possible.",
            "Label": "DFS"
        },
        {
            "Exercise": "Given three strings, find the minimum edit distance to transform one into the other two.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if two nodes are connected in a graph with frequent edge insertions and deletions.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Generate all subsets of a given set of elements.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate an approximate solution to the travelling salesman problem by utilizing the minimum spanning tree for route construction",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Return the topological ordering of nodes in a directed acyclic graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Execute jobs in increasing order of their duration to optimize process completion time",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Efficient merging and querying of groups",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the best approach to cut a rod into pieces for maximum profit, given price values for each possible length?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Break a set into K subsets such that the sum of each subset is equal.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a string, reverse the words but keep the characters within each word in their original form.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a grid, calculate how many shortest paths exist from the start point to any destination cell.",
            "Label": "BFS"
        },
        {
            "Exercise": "Implement a traversal for a binary tree that alternates the direction of nodes at each level.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the first occurrence of a target element by narrowing the search space while respecting the sorted nature of the array with duplicates.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given an N\u00d7N board, place N queens in a manner that ensures they do not attack each other on any row, column, or diagonal.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Help the rat reach the exit by taking advantage of jumps and multiple-step movements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find an approximation for the travelling salesman problem using a minimum spanning tree and adjusting the traversal for efficiency",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine the optimal strategy for promoting pawns in the endgame.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Establish group hierarchy using connectivity and relationship analysis.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the most effective arrangement of shelves for maximizing storage potential",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What events are included in the Winter Olympics?",
            "Label": "N/A"
        },
        {
            "Exercise": "In a large graph, determine the shortest path from several sources to the destination node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Analyze the game with different player preferences and the resulting Nash equilibria.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How do you avoid jet lag during international travel?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify zugzwang positions in chess endgames.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the missing value in a sorted array by applying an optimized approach that minimizes comparisons and complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Enumerate all rearrangements of characters in the string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Study how players balance short-term gains with long-term cooperation in iterated prisoner's dilemma.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Commonly used for scheduling, graph, and partition problems",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the peak element in a 2D matrix by narrowing down the search space to the most relevant regions.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify key moves in a competitive water jug problem with limited jug sizes and multiple rounds.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the shortest path in a graph from a start node to multiple endpoints.",
            "Label": "BFS"
        },
        {
            "Exercise": "Study the impact of player preferences on the fairness of the cake cutting process.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the group with the most members in a social network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Explore strategies for improving cooperation in the management of shared natural resources.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What are the best ways to store fresh herbs?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the optimal travel route across a grid with weighted cells.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a target sum, find the minimal subset whose sum is greater than it.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Explore the graph and determine if a path can be made from the start to the target node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Analyze the impact of bluffing on minimax strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the pair of indices in an array that forms the largest container with water.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How is a chord progression formed in classical music?",
            "Label": "N/A"
        },
        {
            "Exercise": "Given a directed graph, determine if a cycle exists within the graph by examining its edges.",
            "Label": "BFS"
        },
        {
            "Exercise": "Solve for the Nash equilibrium in the Colonel Blotto game with multiple players.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the root by performing multiple union operations and tracking the leader.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Traverse the graph and find a path that connects two specific nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Use disjoint-set with path compression to find the root of a group quickly.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Path compression for faster operations",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Monitor the size of islands in a grid-based simulation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Estimate the best route for the travelling salesman problem by applying the minimum spanning tree algorithm and adjusting the path for an approximation",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Rearrange the characters of a string to eliminate adjacent character repetitions",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine the path with the fewest steps from the root node to the furthest leaf node in a binary tree.",
            "Label": "BFS"
        },
        {
            "Exercise": "How can you improve your cardiovascular health?",
            "Label": "N/A"
        },
        {
            "Exercise": "Implement a sliding window to track the maximum sum of any contiguous subarray of fixed size.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the most efficient way to pack items into bins, ensuring minimal bin usage",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Sort an array consisting of three distinct values, ensuring linear time complexity.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Implement a contextual bandit algorithm for the multi-armed bandit problem.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Merge two groups by identifying common members and updating their relationships.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine if two elements are equivalent based on a relation.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Detect a cycle in a graph by visiting each node and backtracking when necessary.",
            "Label": "DFS"
        },
        {
            "Exercise": "How has social media changed the way we communicate?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find distinct subsets of a set of positive integers that sum up to a specific number",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given two DNA sequences, identify the longest matching subsequence.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Develop strategies for resource allocation that account for an opponent's previous actions in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Ensure no train needs to wait by calculating the minimum platform count",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Search for a target value in a sorted array with duplicates while ensuring quick and efficient results.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Remove duplicates from a sorted array by shifting elements efficiently.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Analyze optimal play in a king and pawn versus king endgame.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a sequence of numbers, find the contiguous subarray with the maximum product.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the optimal path from the player's start point to the enemy's location.",
            "Label": "BFS"
        },
        {
            "Exercise": "Find the most cost-efficient path in a weighted grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Competitive game theory",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How has social media affected traditional marketing strategies?",
            "Label": "N/A"
        },
        {
            "Exercise": "What led to the fall of the Byzantine Empire?",
            "Label": "N/A"
        },
        {
            "Exercise": "Check if a string can be divided into valid words from a dictionary by considering possible combinations.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify and solve recursive subproblems that lead to the best solution",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Minimize the difference between the sums of two subsets by dividing the set of numbers",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Optimize a search process by incorporating constraints to focus on the relevant part of the search space.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Used in systems for exploring state spaces, such as game search algorithms",
            "Label": "BFS"
        },
        {
            "Exercise": "What were the military strategies of the ancient Spartans?",
            "Label": "N/A"
        },
        {
            "Exercise": "What is the role of rhythm in creating musical expression?",
            "Label": "N/A"
        },
        {
            "Exercise": "Can handle both directed and undirected graphs",
            "Label": "BFS"
        },
        {
            "Exercise": "Traverse a graph to find a path that passes through certain key nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Is it possible to partition a set into two subsets such that their sums are identical?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Position 8 queens on the board ensuring that no two queens threaten one another",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify cycles in a graph by searching for a path that revisits a node during traversal.",
            "Label": "DFS"
        },
        {
            "Exercise": "What should you do in case of a medical emergency abroad?",
            "Label": "N/A"
        },
        {
            "Exercise": "What are the primary challenges of long-term space travel?",
            "Label": "N/A"
        },
        {
            "Exercise": "Optimize the subset selection to minimize the product value",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Divide a set of elements into non-overlapping groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the target in a bitonic array that follows a random sequence but still maintains the bitonic property.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for a target in an array that is almost sorted, where every element can be displaced by only one position.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Locate all pairs in a sorted array whose difference equals a given value.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify the largest clique in a social graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for three numbers in an array that add up to zero while avoiding duplicate triplet solutions.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find all ways to decompose a string into smaller parts where each is a palindrome.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Questions on philosophical concepts, logical reasoning, and critical thinking.",
            "Label": "N/A"
        },
        {
            "Exercise": "Explore the outcomes when players prioritize individual risk aversion.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Level order traversal of a binary tree: print each level's nodes in order.",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for the maximum value in a sorted array by narrowing down the search space to optimize the lookup.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Solve the Knight\u2019s tour with reduced backtracking using a heuristic approach",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Rearrange the words in the string so that the last word comes first and the first word comes last.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Speed up the search process by focusing on valid areas of the search space as defined by constraints.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Maximize the total value of a selection of items, with the constraint that their total weight does not exceed the given knapsack capacity.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Calculate the largest number by rearranging digits with K swaps at most",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the role of virtual reality in education?",
            "Label": "N/A"
        },
        {
            "Exercise": "Rearrange an array by placing odd numbers at the beginning and even numbers at the end.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify repeated elements in an array by comparing values while iterating.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the nth Fibonacci number using a bottom-up approach.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Generate all solutions to the N-Queens problem and print each valid arrangement.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Choose the optimal combination of items to maximize value while staying under the weight threshold.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Study the evolution of mixed strategies in an iterated non-zero-sum game with adaptive players.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Efficiently combine pairs of adjacent elements to reduce size",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Implement a coloring algorithm for a graph to make sure adjacent nodes are assigned different colors.",
            "Label": "DFS"
        },
        {
            "Exercise": "Strategic voting theory",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Implement a topological sort for a directed graph with no cycles.",
            "Label": "DFS"
        },
        {
            "Exercise": "Generate every segment of a list of numbers as a subarray.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How are advancements in robotics shaping industries?",
            "Label": "N/A"
        },
        {
            "Exercise": "Reorder characters in a string to guarantee no adjacent repeats",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Identify the points in a graph that, when removed, cause the graph to split into multiple disconnected components.",
            "Label": "DFS"
        },
        {
            "Exercise": "Analyze the role of fairness in two-player bargaining scenarios with external constraints.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How do you properly sear meat?",
            "Label": "N/A"
        },
        {
            "Exercise": "Cluster a graph\u2019s nodes by identifying edges that link the nodes within a group.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the maximum length path in a tree from one node to another.",
            "Label": "DFS"
        },
        {
            "Exercise": "How do you find the minimum coin combination that sums up to the desired amount?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the best set of intervals to maximize participation",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Locate a pair of distinct elements in an unsorted array that add up to the target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Generate subsets of a fixed size",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the importance of protecting wetlands?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify and extract subgraphs from a graph based on connectivity criteria.",
            "Label": "DFS"
        },
        {
            "Exercise": "Use efficient algorithms to search for a peak element in a 2D matrix, ensuring that the element is greater than or equal to its neighbors.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "What are defense mechanisms and how do they function?",
            "Label": "N/A"
        },
        {
            "Exercise": "Calculate the merging cost of two groups with different sizes.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How do you find the nth Fibonacci number using the relation of the previous two numbers?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the target in a bitonic array containing floating-point numbers where values change rapidly.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Traverse a binary tree and print the nodes at each level in order.",
            "Label": "BFS"
        },
        {
            "Exercise": "Search for the largest smaller element in a sorted array with a focus on minimizing unnecessary steps and comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Enumerate all Hamiltonian paths in the graph where every vertex is visited exactly once.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How do you determine the maximum value you can rob from a series of houses, ensuring you skip at least one between robberies?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "In a maze, determine the minimum steps required to go from the start point to the exit while bypassing obstacles.",
            "Label": "BFS"
        },
        {
            "Exercise": "Enumerate all possible distinct arrangements of a set of elements.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What is the future of social media marketing?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate all different routes from nodes that lead to the specific goal node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify every possible path in a maze from the entry to the exit.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Apply an informed heuristic approach to the Knight\u2019s tour problem to improve pathfinding",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine the Kth smallest element in an array using efficient search techniques that optimize performance.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Given an undirected graph, find all bridges and ensure they connect separate parts of the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify all the ways to move from the start to the end within the maze.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "How did the discovery of Machu Picchu impact our understanding of the Inca civilization?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the shortest routes from a start node to several target nodes in a connected graph.",
            "Label": "BFS"
        },
        {
            "Exercise": "What is the importance of logical fallacies in critical thinking?",
            "Label": "N/A"
        },
        {
            "Exercise": "Trial and correction approach for problem-solving",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Generate a collection of substrings that are palindromes from a string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Sort and print all the longest common subsequences between two strings in lexicographic order.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Calculate the Shapley value in a cooperative game with incomplete information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate the duplicate values in an unsorted array by comparing elements with each other.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Represent a fraction as the sum of multiple distinct reciprocal terms",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Given a string, calculate how many palindromic subsequences exist considering different character positions.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Separate a graph into subgraphs by identifying its disconnected parts.",
            "Label": "DFS"
        },
        {
            "Exercise": "Uses a series of choices to solve problems like shortest path, minimum spanning tree, and more",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine which elements in the array give the minimum product when multiplied",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find and record all paths from the root node to each leaf in the binary tree.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Search for a target in a sorted array with negative numbers",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Investigate the role of vote splitting in first-past-the-post elections.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate a peak element in an array that is greater than or equal to its left and right neighbors.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the quickest path through a grid with weighted cells from the top-left to the bottom-right.",
            "Label": "BFS"
        },
        {
            "Exercise": "Improve efficiency by converting a recursive solution to an iterative tabulation approach",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Create multiple partitions of a set while minimizing the number of groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the minimum cost to reduce an array to a single element",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Union based on weight, prioritizing the group with the higher priority to be merged.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Evaluate the cost of merging two groups based on group properties.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the difference between inductive and deductive logic?",
            "Label": "N/A"
        },
        {
            "Exercise": "Study the effects of external attacks or disruptions on optimal routing strategies in network games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Solve the puzzle by positioning 8 queens such that none of them threaten each other\u2019s position",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Establish a hierarchical order by analyzing the strength of relationships between elements.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Use tabulation to solve the Fibonacci sequence iteratively",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is the importance of mental health in overall well-being?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the index of the fixed point where the value is equal to its index in logarithmic time.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify the path in a graph that does not exceed a specific length constraint.",
            "Label": "DFS"
        },
        {
            "Exercise": "Evaluate how information sharing or secrecy affects mixed strategy decisions in non-zero-sum games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a sequence of matrices, determine the optimal way to multiply them with the fewest multiplications.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Identify triplets whose sum is zero in an unsorted array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Dynamic programming",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Detect connected zones in a power grid system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine if you can reach the last index of an array by jumping from index to index, given the maximum jump length at each position.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if all buildings are connected in a city-wide utility system.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the importance of the space race during the Cold War?",
            "Label": "N/A"
        },
        {
            "Exercise": "Group similar elements together by their property values.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given a binary tree, calculate the shortest route from the root to the deepest leaf node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a staircase with n steps, compute the number of ways to reach the top by moving 1 or 2 steps at a time.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Sequence jobs to ensure they fit within their time constraints",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Ensure the tree spans all nodes with no cycles, minimizing edge weight.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What is the minimum number of coins needed to achieve a target value using given coin denominations?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Efficiently count how many times a target element appears in a sorted array while reducing unnecessary comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Optimize the shortest path search for graphs with bounded edge weights using Dial\u2019s algorithm",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Implement a three-way partitioning solution to sort an array of 0s, 1s, and 2s.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Distribute resources in a way that balances fairness and efficiency",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Explore the different ways a string can be partitioned into palindromic substrings.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Use a backtracking approach to color a graph while ensuring no adjacent nodes have the same color.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the index where the value matches the index in a sorted array in fewer steps than linear search.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Determine the shortest path to a specific page in a network of interconnected webpages.",
            "Label": "BFS"
        },
        {
            "Exercise": "What is the significance of the Lascaux cave paintings?",
            "Label": "N/A"
        },
        {
            "Exercise": "Enumerate all configurations of N queens on a chessboard that solve the N-Queens problem.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Which city is known as the 'City of Lights'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Enumerate all routes through the maze from the initial point to the final destination.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Analyze Bertrand competition when firms have asymmetric information about market demand.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Convert a given fraction into a series of unique fractions",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Suitable for problems with a sorted structure",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Compute the power set of a set and arrange it lexicographically.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the longest possible path between two nodes in an unweighted graph.",
            "Label": "BFS"
        },
        {
            "Exercise": "Starting from the root, perform a traversal of the tree visiting every node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Shift all zeroes to the end of the array while keeping non-zero values in the same order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the order of characters in an alien alphabet, based on a list of words provided.",
            "Label": "BFS"
        },
        {
            "Exercise": "Partition a graph into groups using minimal memory and time complexity.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Locate and validate a specific subgraph in a given graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Plan movement strategies to ensure reaching the destination",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Place all odd numbers in front of even numbers while maintaining their relative positions.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Reorganize brackets to achieve balance with the fewest number of swaps",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the largest region of influence in a political graph.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the least expensive path in a weighted grid.",
            "Label": "BFS"
        },
        {
            "Exercise": "Verify if a relation is symmetric, transitive, and reflexive.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Navigate through a maze to find the path from the start point to the destination.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the first occurrence of a target in an array with repeated values",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for two elements in an unsorted array whose sum is equal to the target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Locate the target in a rotated array of floating-point numbers",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Solve a water jug problem in a competitive setting with multiple rounds of play.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Simulate merging nodes in a forest with weighted unions.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Investigate how fairness criteria change when external factors, such as legal constraints, are introduced into bargaining.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine whether a directed graph contains cycles by examining the reachability between nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "Maximize the efficiency of a schedule by reducing idle time",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Arrange tasks by burst time to reduce average waiting times",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How do modern artists challenge conventional notions of beauty?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate a peak element in a 2D matrix with minimal comparisons by applying efficient search algorithms.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Check for connectivity between different parts of an island in a grid map.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Find the maximum sum of a subarray of fixed size using a sliding window.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a series of houses with values, determine the maximum sum you can rob while skipping adjacent houses.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Investigate the effects of repeated interactions on dominant strategies in game theory.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a binary tree, implement a method to print the values at each level, one by one.",
            "Label": "BFS"
        },
        {
            "Exercise": "Perfect information games",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Form the power set from a set and order it in lexicographic manner.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify all pairs in a sorted array where the difference between the elements matches a specific number.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "How do meteorologists track hurricanes?",
            "Label": "N/A"
        },
        {
            "Exercise": "How does social media affect news dissemination?",
            "Label": "N/A"
        },
        {
            "Exercise": "Break a graph into subgraphs by separating connected components.",
            "Label": "DFS"
        },
        {
            "Exercise": "Swap elements in an array to reverse its order, moving from the outer elements inward.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Group elements based on common attributes.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Identify the first missing positive integer in a sorted array with minimal computational effort using optimized techniques.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Often used in puzzles, game-solving, and optimization problems",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Organize elements based on their resemblance in a multidimensional space.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the maximum sum of any subarray of fixed size by sliding through the array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Process connectivity queries in a graph where edges are added and removed.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Enumerate paths that avoid certain subgraphs between source and destination",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Calculate platform demand to ensure smooth train transitions",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Determine a pair of numbers in a rotated sorted array that sum to the given target value.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Create a new sorted array by merging two already sorted arrays.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Schedule intervals in a way that minimizes gaps between activities",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Reduce the time complexity of recursive solutions with caching",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Explore the effects of introducing penalties for failing to cooperate.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How do you find the optimal way to multiply a sequence of matrices with the least number of scalar operations?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Move zeroes to the end of an array, keeping non-zero elements in their initial order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Given a string and a dictionary, determine if the string can be segmented into valid words.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Search for the maximum consecutive 1's in a binary array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Locate a target element in a matrix where the rows and columns are sorted but with noise elements in the data",
            "Label": "Binary Search"
        },
        {
            "Exercise": "How does the use of technology impact language learning?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the number of paths in a directed acyclic graph between two vertices",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Analyze minimax strategies in adversarial board games like chess.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What is the role of memory in human psychology?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the first instance of a target element in a sorted array with duplicate values using an optimized approach.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "For three strings, calculate the minimum operations needed to convert one string to the other two strings.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Given an undirected graph, find the points whose removal would divide the graph into disconnected parts.",
            "Label": "DFS"
        },
        {
            "Exercise": "Identify the shortest paths between a source vertex and all other vertices in a graph with bounded edge weights",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "What was the Challenger disaster and its significance?",
            "Label": "N/A"
        },
        {
            "Exercise": "How do political systems handle civil disobedience?",
            "Label": "N/A"
        },
        {
            "Exercise": "Identify the representative of a group efficiently.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Given three sequences, find the minimum edit distance to convert them into one another by performing the fewest operations.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Allocate tasks to teams ensuring workload balance.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Pick the fewest subsets needed to cover every element in a universal set",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the bridges in a graph and examine how their removal would affect the graph\u2019s connectivity.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find all possible triplets in an array that result in a sum of zero.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Model the effect of barriers that prevent union of previously connected groups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Use graph coloring techniques to assign distinct colors to adjacent vertices with the fewest colors",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find the number of subarrays whose elements sum up to a given target value using a sliding window approach.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the target element in a rotated sorted array of characters",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Identify the target in an infinite array using a strategy where the search range increases dynamically.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for every route from the corner cell to the middle cell in the maze",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Locate the largest element in a rotated array by applying optimized searching methods to reduce overhead.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the optimal order of cuts to reduce the cost of dividing a board into squares",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Combine two overlapping shapes into a single larger shape.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search the graph to find all nodes at the farthest level from the start node.",
            "Label": "DFS"
        },
        {
            "Exercise": "What is the method for generating all subsets of a set?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Explore the Shapley value in competitive markets and its impact on strategic cooperation.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Understand the role of pawn structure in the endgame.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Search for the first occurrence of a target in an array sorted in ascending order",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for a target in a rotated array with a descending order",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the smallest subset of numbers from an array that has a sum greater than the specified target.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Check if a sequence is symmetric around its midpoint.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Check for extra routes in a logistics and delivery network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for a target in a rotated array where the array is sorted in a non-standard way",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find duplicate communication links in a mobile network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Rearrange elements to form the largest lexicographic array by swapping only within the given constraints",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Efficiently search for the largest smaller element than a target in a sorted array.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Search for a fixed point in a sorted array by eliminating half of the elements in each step.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "For a directed graph, find all nodes connected to the starting node.",
            "Label": "BFS"
        },
        {
            "Exercise": "Locate two numbers in a rotated array that sum to a target by adjusting the binary search to account for the rotation.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Identify the longest route you can travel in a matrix, avoiding obstacles along the way.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Select the optimal elements from the array to minimize the product result",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How effective is the film's dialogue?",
            "Label": "N/A"
        },
        {
            "Exercise": "Split the set of numbers into two parts with the smallest sum difference possible",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Identify the distinct groups in a network where barriers prevent their union.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "What role does religion play in shaping cultural practices?",
            "Label": "N/A"
        },
        {
            "Exercise": "Use up to K negations to maximize the array's total sum",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Validate if two strings are anagrams by checking if they contain the same letters in different orders.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Count the number of unique ways to get from the top-left corner to the bottom-right corner in a grid, where only right and down movements are allowed.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine the minimal bin count needed to pack objects into bins without exceeding capacity",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find a path where the total edge weight does not exceed a given value.",
            "Label": "DFS"
        },
        {
            "Exercise": "Determine the longest increasing subsequence when there are constraints on the values",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Verify if all devices are connected in a home network.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Determine the optimal strategy for players in a zero-sum game scenario.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Create a hierarchy of groups where each group contains related subgroups.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Check if a smaller graph structure is present as a subgraph within a larger graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Find the longest non-repetitive sequence of characters in a string.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Study the concept of strategy adaptation in a non-repetitive matching pennies game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Determine the stability of equilibria in the battle of the sexes game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Union-Find",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Locate a target element in an infinite array without requiring a fixed search space.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Analyze the consequences of strategic voting in a delegation-based voting system.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the maximum distance between two nodes in an unweighted graph.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a rotated sorted array, find two numbers whose sum matches the target by using binary search.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Cluster graph nodes using depth-first search or breadth-first search techniques.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Calculate the minimal connections needed between two people in a graph representing a social network.",
            "Label": "BFS"
        },
        {
            "Exercise": "Identify the shortest path from the root to a leaf node in a binary tree.",
            "Label": "BFS"
        },
        {
            "Exercise": "Heuristic approach for optimization",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "How can you prevent chronic back pain?",
            "Label": "N/A"
        },
        {
            "Exercise": "Locate the square of a number within a range using a time-efficient search method.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Split the elements of the set into K subsets with equal sum in each.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Determine if two files belong to the same directory structure.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Track the maximum series of ones in a binary array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What role does power play in 'Lord of the Flies'?",
            "Label": "N/A"
        },
        {
            "Exercise": "Examine how the allocation of resources changes when players are allowed to change their strategy mid-game in the Colonel Blotto game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify substrings in the string that are non-repetitive.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Given a grid with varying weights, find the optimal path with the least cost.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine whether a graph is bipartite.",
            "Label": "BFS"
        },
        {
            "Exercise": "Analyze the effect of bidder reputation on optimal auction strategies.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "What are the cultural attitudes toward money in various societies?",
            "Label": "N/A"
        },
        {
            "Exercise": "Search for a pair of numbers in a list whose sum is equal to the target value.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the height of a tree by calculating the longest path from the root to a leaf node.",
            "Label": "DFS"
        },
        {
            "Exercise": "Implement pathfinding to avoid obstacles and find the shortest route to the enemy in a shooting game.",
            "Label": "BFS"
        },
        {
            "Exercise": "Study how player roles (first or second mover) influence strategies in a sequential game with perfect information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the maximum value in a rotated array by narrowing down the search space and eliminating unnecessary checks.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Understand how zugzwang can influence gameplay in combinatorial games like Nim.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Identify all valid ways to arrange puzzle pieces to find a solution.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Implement an algorithm to find the shortest path to a specific webpage in a web crawling scenario.",
            "Label": "BFS"
        },
        {
            "Exercise": "Given a forest grid, simulate the spread of a wildfire from multiple starting points.",
            "Label": "BFS"
        },
        {
            "Exercise": "Check if a word is the same when its letters are read in reverse order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "What are social structures in animal species?",
            "Label": "N/A"
        },
        {
            "Exercise": "Search for all subgraphs that are connected, ensuring all nodes are categorized into groups.",
            "Label": "DFS"
        },
        {
            "Exercise": "Analyze strategies in a game where payoffs decay over repeated rounds.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a number n, find the Fibonacci number at that position using memoization.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Determine if a string can be split into multiple valid sums",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Check if the sum-strings have multiple parts separated by different operators",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Examine how the concept of carrying capacity applies to the tragedy of the commons.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Find the common elements between two arrays while maintaining the sorted order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Narrow the search space to relevant areas using constraints to ensure a more efficient search solution.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Maintain a dynamic graph structure that allows efficient connectivity queries.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "List all distinct palindromic substrings found in a string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "What should you know about tipping customs in different countries?",
            "Label": "N/A"
        },
        {
            "Exercise": "Traverse the graph and discover all independent sections of the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Traverse a graph from a starting point to visit each of the target nodes.",
            "Label": "DFS"
        },
        {
            "Exercise": "In an undirected graph, find all bridges by analyzing the impact of edge removals on connectivity.",
            "Label": "DFS"
        },
        {
            "Exercise": "Explore all possible paths from root to destination in a tree structure",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find unreachable or isolated nodes in a graph starting from a source node.",
            "Label": "DFS"
        },
        {
            "Exercise": "What was the significance of the Great Pyramids of Giza?",
            "Label": "N/A"
        },
        {
            "Exercise": "Find the target in a matrix where the rows are sorted in ascending order and columns are sorted in descending order",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Breadth-First Search",
            "Label": "BFS"
        },
        {
            "Exercise": "Efficiently compute the shortest paths from a source vertex to all other vertices in a graph with bounded edges",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Explore how the Shapley value applies to voting systems and the distribution of voting power.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Express a given fraction as a sum of distinct unit fractions.",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Locate the closest pair in two sorted arrays by adjusting pointers based on the sum comparison to the target.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Search for the longest valid prefix within constraints by employing an optimized method to reduce comparisons.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find repeated elements in an array by iterating through the array and checking each element.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Find the nodes at the greatest depth in a graph starting from the root.",
            "Label": "DFS"
        },
        {
            "Exercise": "Solve a problem where the solution to each subproblem helps solve the whole",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Iterate through the edges of a graph, adding the smallest to form the spanning tree",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Rearrange a string to avoid two same characters being adjacent to each other",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Efficiently identify the smallest missing positive integer in a sorted array by narrowing down the search space.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Analyze Stackelberg competition under network effects or externalities.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Given a grid, count the total number of paths from the top-left to the bottom-right corner, moving only right and down.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "What is the overall tone of the movie?",
            "Label": "N/A"
        },
        {
            "Exercise": "Design an algorithm for cake cutting where players receive the best value for their perceived portion.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Analyze the role of bluffing and signaling in a war of attrition game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Choose which K elements to negate to achieve the largest possible sum",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Calculate minimax strategies in sequential decision-making games.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "For a sorted array, square the elements and return the result in sorted order.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Determine the subarray in a sequence of numbers that has the maximum sum.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Leverage constraints to optimize the search process by reducing the number of potential solutions to explore.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Explore all reachable nodes in a graph and identify any unvisited ones.",
            "Label": "DFS"
        },
        {
            "Exercise": "Generate and list all possible palindromic substrings of a string.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Locate the target element in a nearly sorted array, where elements are within one position of their correct sorted location.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Extract all substrings from the string that contain only unique characters.",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Propagate leader updates efficiently in a union-find structure with path compression.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Simplify a range of intervals by merging those with common time frames",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Use efficient algorithms to track leader changes in a dynamic group structure.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for an element in an infinite array by gradually increasing the search bounds and narrowing after each iteration.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Confirm that no alternative spanning tree has a lower weight.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Search for the last occurrence of a target when the array is very large",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Analyze how reserve prices affect bidding behavior in sealed-bid auctions.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Locate a peak element in an unsorted array where adjacent elements can have the same value.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Explore how players\u2019 expectations influence strategies in the ultimatum game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Use a sliding window to find the maximum sum of a subarray of fixed length in an array.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Examine strategies in a population with both cooperative and selfish players.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Traverse a graph and highlight each separate component as you explore.",
            "Label": "DFS"
        },
        {
            "Exercise": "Efficient partitioning of sets",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "Decompose a given fraction into a set of unit fractions",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Optimize steps to reduce an array to size 1 with minimal costs",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Traverse a linked list using two pointers to find the middle element.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Search for the square root of a number in a specific range, ensuring a minimum error margin.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Find the number of paths between two vertices within a specific time or resource limit",
            "Label": "Backtracking"
        },
        {
            "Exercise": "Find the fewest steps required to travel from one node to another in a graph.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the optimal threshold for withdrawal in a war of attrition game.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Remove overlaps by adjusting the intervals to merge them",
            "Label": "Greedy Algorithm"
        },
        {
            "Exercise": "Find all disjoint sets of nodes in a graph that are connected to each other.",
            "Label": "DFS"
        },
        {
            "Exercise": "Calculate the shortest route through a weighted grid from the top-left to the bottom-right.",
            "Label": "BFS"
        },
        {
            "Exercise": "Determine the equitable distribution of resources in a bargaining game with asymmetric information.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Detect repeating numbers in an array by shifting through the array and checking for matches.",
            "Label": "Two pointers"
        },
        {
            "Exercise": "Search for nodes that are disconnected or isolated in the graph.",
            "Label": "DFS"
        },
        {
            "Exercise": "Examine how private ownership might help mitigate the tragedy of the commons.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "Efficiently identify the largest element smaller than the target in a sorted array with a reduced time complexity.",
            "Label": "Binary Search"
        },
        {
            "Exercise": "Minimize the time complexity of root searches by caching the leader of each group.",
            "Label": "Disjoint Set"
        },
        {
            "Exercise": "How do you calculate the best order for multiplying matrices to minimize the computational cost?",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Find the total sum of all subarrays in a given array of numbers.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Analyze strategies in sealed-bid auctions with budget constraints.",
            "Label": "Game Theory"
        },
        {
            "Exercise": "How do tornadoes form and how are they measured?",
            "Label": "N/A"
        },
        {
            "Exercise": "Maximize the total value of items placed in a knapsack, subject to a weight capacity constraint.",
            "Label": "Dynamic Programming(DP)"
        },
        {
            "Exercise": "Stag hunt",
            "Label": "Game Theory"
        }
    ]
}